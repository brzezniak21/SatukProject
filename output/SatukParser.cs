//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Bartosz/Desktop/SatukProject-main/Satuk/Satuk.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SatukParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, LPAREN=16, 
		RPAREN=17, LBRACE=18, RBRACE=19, LBRACK=20, RBRACK=21, SEMICOLON=22, COMMA=23, 
		DOT=24, ASSIGN=25, GT=26, LT=27, NOT=28, QUESTION=29, EQUAL=30, LE=31, 
		GE=32, NOTEQUAL=33, AND=34, OR=35, INC=36, DEC=37, ADD=38, SUB=39, MUL=40, 
		DIV=41, MOD=42, ADD_ASSIGN=43, SUB_ASSIGN=44, MUL_ASSIGN=45, DIV_ASSIGN=46, 
		WS=47, INT=48, STRING=49, BOOL=50, FLOAT=51, CHAR=52, VARIABLE=53;
	public const int
		RULE_program = 0, RULE_prog = 1, RULE_print = 2, RULE_print_content = 3, 
		RULE_assignment = 4, RULE_assignment_function = 5, RULE_arithmetics = 6, 
		RULE_mutators = 7, RULE_logical_instructions = 8, RULE_if = 9, RULE_if_statement = 10, 
		RULE_elif_statement = 11, RULE_else_statement = 12, RULE_loop = 13, RULE_functions = 14, 
		RULE_function = 15, RULE_constructor = 16, RULE_return = 17, RULE_class = 18, 
		RULE_execute_function = 19, RULE_void_function = 20, RULE_int_function = 21, 
		RULE_float_function = 22, RULE_string_function = 23, RULE_char_function = 24, 
		RULE_bool_function = 25, RULE_variable_function = 26, RULE_void_return = 27, 
		RULE_int_return = 28, RULE_float_return = 29, RULE_string_return = 30, 
		RULE_char_return = 31, RULE_bool_return = 32, RULE_variable_return = 33;
	public static readonly string[] ruleNames = {
		"program", "prog", "print", "print_content", "assignment", "assignment_function", 
		"arithmetics", "mutators", "logical_instructions", "if", "if_statement", 
		"elif_statement", "else_statement", "loop", "functions", "function", "constructor", 
		"return", "class", "execute_function", "void_function", "int_function", 
		"float_function", "string_function", "char_function", "bool_function", 
		"variable_function", "void_return", "int_return", "float_return", "string_return", 
		"char_return", "bool_return", "variable_return"
	};

	private static readonly string[] _LiteralNames = {
		null, "'program'", "'display'", "'bool'", "'string'", "'char'", "'int'", 
		"'float'", "'new'", "'if'", "'else if'", "'else'", "'loop'", "'class'", 
		"'void'", "'return'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", 
		"','", "'.'", "'='", "'>'", "'<'", "'!'", "'?'", "'=='", "'<='", "'>='", 
		null, "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'+='", "'-='", "'*='", "'/='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
		"RBRACK", "SEMICOLON", "COMMA", "DOT", "ASSIGN", "GT", "LT", "NOT", "QUESTION", 
		"EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", 
		"MUL", "DIV", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
		"WS", "INT", "STRING", "BOOL", "FLOAT", "CHAR", "VARIABLE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Satuk.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SatukParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SatukParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SatukParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext[] functions() {
			return GetRuleContexts<FunctionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext functions(int i) {
			return GetRuleContext<FunctionsContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 68;
				@class();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254757624L) != 0)) {
				{
				{
				State = 74;
				functions();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 80;
			Match(T__0);
			State = 81;
			Match(LBRACE);
			State = 82;
			prog();
			State = 83;
			@return();
			State = 84;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext[] @if() {
			return GetRuleContexts<IfContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if(int i) {
			return GetRuleContext<IfContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext[] loop() {
			return GetRuleContexts<LoopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop(int i) {
			return GetRuleContext<LoopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext[] print() {
			return GetRuleContexts<PrintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print(int i) {
			return GetRuleContext<PrintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_functionContext[] execute_function() {
			return GetRuleContexts<Execute_functionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_functionContext execute_function(int i) {
			return GetRuleContext<Execute_functionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MutatorsContext[] mutators() {
			return GetRuleContexts<MutatorsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MutatorsContext mutators(int i) {
			return GetRuleContext<MutatorsContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 2, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254745852L) != 0)) {
				{
				State = 92;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 86;
					assignment();
					}
					break;
				case 2:
					{
					State = 87;
					@if();
					}
					break;
				case 3:
					{
					State = 88;
					loop();
					}
					break;
				case 4:
					{
					State = 89;
					print();
					}
					break;
				case 5:
					{
					State = 90;
					execute_function();
					}
					break;
				case 6:
					{
					State = 91;
					mutators();
					}
					break;
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
	 
		public PrintContext() { }
		public virtual void CopyFrom(PrintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DisplayContext : PrintContext {
		public Print_contentContext result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Print_contentContext print_content() {
			return GetRuleContext<Print_contentContext>(0);
		}
		public DisplayContext(PrintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 4, RULE_print);
		try {
			_localctx = new DisplayContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(T__1);
			State = 98;
			Match(LPAREN);
			State = 99;
			((DisplayContext)_localctx).result = print_content();
			State = 100;
			Match(RPAREN);
			State = 101;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_contentContext : ParserRuleContext {
		public Print_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_content; } }
	 
		public Print_contentContext() { }
		public virtual void CopyFrom(Print_contentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Print_boolContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SatukParser.BOOL, 0); }
		public Print_boolContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_bool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_bool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_bool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_intContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		public Print_intContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_int(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DisplayStringContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SatukParser.STRING, 0); }
		public DisplayStringContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterDisplayString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitDisplayString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplayString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_charContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(SatukParser.CHAR, 0); }
		public Print_charContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_char(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_char(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_char(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_arithmeticsContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		public Print_arithmeticsContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_arithmetics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_arithmetics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_arithmetics(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_variableContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		public Print_variableContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_variable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_logicalInstructionsContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		public Print_logicalInstructionsContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_logicalInstructions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_logicalInstructions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_logicalInstructions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_floatContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		public Print_floatContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_float(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_float(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_float(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_contentContext print_content() {
		Print_contentContext _localctx = new Print_contentContext(Context, State);
		EnterRule(_localctx, 6, RULE_print_content);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new DisplayStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 103;
				Match(STRING);
				}
				break;
			case 2:
				_localctx = new Print_variableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 104;
				Match(VARIABLE);
				}
				break;
			case 3:
				_localctx = new Print_charContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 105;
				Match(CHAR);
				}
				break;
			case 4:
				_localctx = new Print_intContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 106;
				Match(INT);
				}
				break;
			case 5:
				_localctx = new Print_floatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 107;
				Match(FLOAT);
				}
				break;
			case 6:
				_localctx = new Print_boolContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 108;
				Match(BOOL);
				}
				break;
			case 7:
				_localctx = new Print_arithmeticsContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 109;
				arithmetics(0);
				}
				break;
			case 8:
				_localctx = new Print_logicalInstructionsContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 110;
				logical_instructions(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarDynAssContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SatukParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SatukParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(SatukParser.CHAR, 0); }
		public VarDynAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterVarDynAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitVarDynAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDynAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAssContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SatukParser.STRING, 0); }
		public StringAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterStringAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitStringAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharAssContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(SatukParser.CHAR, 0); }
		public CharAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterCharAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitCharAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArAssContext : AssignmentContext {
		public ArithmeticsContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		public ArAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterArAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitArAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassAssContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(SatukParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(SatukParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SatukParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SatukParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(SatukParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(SatukParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR() { return GetTokens(SatukParser.CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR(int i) {
			return GetToken(SatukParser.CHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOOL() { return GetTokens(SatukParser.BOOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL(int i) {
			return GetToken(SatukParser.BOOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public ClassAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterClassAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitClassAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolAssContext : AssignmentContext {
		public Logical_instructionsContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		public BoolAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterBoolAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitBoolAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntConstAssContext : AssignmentContext {
		public ArithmeticsContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		public IntConstAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterIntConstAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitIntConstAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntConstAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatConstAssContext : AssignmentContext {
		public ArithmeticsContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		public FloatConstAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFloatConstAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFloatConstAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatConstAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignment);
		int _la;
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new ArAssContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				Match(VARIABLE);
				State = 114;
				Match(ASSIGN);
				State = 115;
				((ArAssContext)_localctx).expr = arithmetics(0);
				State = 116;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new BoolAssContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				Match(T__2);
				State = 119;
				Match(VARIABLE);
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 120;
					Match(ASSIGN);
					State = 121;
					((BoolAssContext)_localctx).expr = logical_instructions(0);
					}
				}

				State = 124;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new StringAssContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 125;
				Match(T__3);
				State = 126;
				Match(VARIABLE);
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 127;
					Match(ASSIGN);
					State = 128;
					Match(STRING);
					}
				}

				State = 131;
				Match(SEMICOLON);
				}
				break;
			case 4:
				_localctx = new CharAssContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 132;
				Match(T__4);
				State = 133;
				Match(VARIABLE);
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 134;
					Match(ASSIGN);
					State = 135;
					Match(CHAR);
					}
				}

				State = 138;
				Match(SEMICOLON);
				}
				break;
			case 5:
				_localctx = new IntConstAssContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 139;
				Match(T__5);
				State = 140;
				Match(VARIABLE);
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 141;
					Match(ASSIGN);
					State = 142;
					((IntConstAssContext)_localctx).expr = arithmetics(0);
					}
				}

				State = 145;
				Match(SEMICOLON);
				}
				break;
			case 6:
				_localctx = new VarDynAssContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 146;
				Match(VARIABLE);
				State = 147;
				Match(ASSIGN);
				State = 148;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8725724278030336L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 149;
				Match(SEMICOLON);
				}
				break;
			case 7:
				_localctx = new FloatConstAssContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 150;
				Match(T__6);
				State = 151;
				Match(VARIABLE);
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 152;
					Match(ASSIGN);
					State = 153;
					((FloatConstAssContext)_localctx).expr = arithmetics(0);
					}
				}

				State = 156;
				Match(SEMICOLON);
				}
				break;
			case 8:
				_localctx = new ClassAssContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 157;
				Match(VARIABLE);
				State = 158;
				Match(VARIABLE);
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 159;
					Match(ASSIGN);
					State = 160;
					Match(T__7);
					State = 161;
					Match(VARIABLE);
					State = 162;
					Match(LPAREN);
					State = 173;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) {
						{
						{
						State = 163;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 168;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 164;
							Match(COMMA);
							State = 165;
							_la = TokenStream.LA(1);
							if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 170;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						State = 175;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 176;
					Match(RPAREN);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_functionContext execute_function() {
			return GetRuleContext<Execute_functionContext>(0);
		}
		public Assignment_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterAssignment_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitAssignment_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_functionContext assignment_function() {
		Assignment_functionContext _localctx = new Assignment_functionContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignment_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 181;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 184;
			Match(VARIABLE);
			State = 185;
			Match(ASSIGN);
			State = 186;
			execute_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticsContext : ParserRuleContext {
		public ArithmeticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetics; } }
	 
		public ArithmeticsContext() { }
		public virtual void CopyFrom(ArithmeticsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberArithmContext : ArithmeticsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		public NumberArithmContext(ArithmeticsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterNumberArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitNumberArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberArithm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenArithmContext : ArithmeticsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		public ParenArithmContext(ArithmeticsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterParenArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitParenArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenArithm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpArithmContext : ArithmeticsContext {
		public ArithmeticsContext left;
		public IToken op;
		public ArithmeticsContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext[] arithmetics() {
			return GetRuleContexts<ArithmeticsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics(int i) {
			return GetRuleContext<ArithmeticsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(SatukParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(SatukParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(SatukParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(SatukParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(SatukParser.SUB, 0); }
		public OpArithmContext(ArithmeticsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterOpArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitOpArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpArithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticsContext arithmetics() {
		return arithmetics(0);
	}

	private ArithmeticsContext arithmetics(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticsContext _localctx = new ArithmeticsContext(Context, _parentState);
		ArithmeticsContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_arithmetics, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				_localctx = new ParenArithmContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 189;
				Match(LPAREN);
				State = 190;
				arithmetics(0);
				State = 191;
				Match(RPAREN);
				}
				break;
			case INT:
			case FLOAT:
			case VARIABLE:
				{
				_localctx = new NumberArithmContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 193;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 11540474045136896L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 204;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 202;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new OpArithmContext(new ArithmeticsContext(_parentctx, _parentState));
						((OpArithmContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetics);
						State = 196;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 197;
						((OpArithmContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7696581394432L) != 0)) ) {
							((OpArithmContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 198;
						((OpArithmContext)_localctx).right = arithmetics(5);
						}
						break;
					case 2:
						{
						_localctx = new OpArithmContext(new ArithmeticsContext(_parentctx, _parentState));
						((OpArithmContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetics);
						State = 199;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 200;
						((OpArithmContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((OpArithmContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 201;
						((OpArithmContext)_localctx).right = arithmetics(4);
						}
						break;
					}
					} 
				}
				State = 206;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MutatorsContext : ParserRuleContext {
		public MutatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutators; } }
	 
		public MutatorsContext() { }
		public virtual void CopyFrom(MutatorsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IncVarContext : MutatorsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(SatukParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public IncVarContext(MutatorsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterIncVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitIncVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecVarContext : MutatorsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SatukParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public DecVarContext(MutatorsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterDecVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitDecVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MutatorsContext mutators() {
		MutatorsContext _localctx = new MutatorsContext(Context, State);
		EnterRule(_localctx, 14, RULE_mutators);
		int _la;
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new IncVarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 207;
				Match(VARIABLE);
				State = 208;
				Match(INC);
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 209;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 2:
				_localctx = new DecVarContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 212;
				Match(VARIABLE);
				State = 213;
				Match(DEC);
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 214;
					Match(SEMICOLON);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_instructionsContext : ParserRuleContext {
		public Logical_instructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_instructions; } }
	 
		public Logical_instructionsContext() { }
		public virtual void CopyFrom(Logical_instructionsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotLogicalContext : Logical_instructionsContext {
		public Logical_instructionsContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SatukParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		public NotLogicalContext(Logical_instructionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterNotLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitNotLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpLogicalContext : Logical_instructionsContext {
		public Logical_instructionsContext left;
		public IToken op;
		public Logical_instructionsContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext[] logical_instructions() {
			return GetRuleContexts<Logical_instructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions(int i) {
			return GetRuleContext<Logical_instructionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(SatukParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(SatukParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SatukParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SatukParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SatukParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(SatukParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SatukParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SatukParser.AND, 0); }
		public OpLogicalContext(Logical_instructionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterOpLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitOpLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarLogicalContext : Logical_instructionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SatukParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		public VarLogicalContext(Logical_instructionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterVarLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitVarLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarLogical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_instructionsContext logical_instructions() {
		return logical_instructions(0);
	}

	private Logical_instructionsContext logical_instructions(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_instructionsContext _localctx = new Logical_instructionsContext(Context, _parentState);
		Logical_instructionsContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_logical_instructions, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				{
				_localctx = new NotLogicalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 220;
				Match(NOT);
				State = 221;
				((NotLogicalContext)_localctx).expr = logical_instructions(4);
				}
				break;
			case LPAREN:
			case INT:
			case BOOL:
			case FLOAT:
			case VARIABLE:
				{
				_localctx = new VarLogicalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 228;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 222;
					Match(FLOAT);
					}
					break;
				case 2:
					{
					State = 223;
					Match(INT);
					}
					break;
				case 3:
					{
					State = 224;
					Match(VARIABLE);
					}
					break;
				case 4:
					{
					State = 225;
					Match(BOOL);
					}
					break;
				case 5:
					{
					State = 226;
					Match(VARIABLE);
					}
					break;
				case 6:
					{
					State = 227;
					arithmetics(0);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 238;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new OpLogicalContext(new Logical_instructionsContext(_parentctx, _parentState));
						((OpLogicalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_logical_instructions);
						State = 232;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 233;
						((OpLogicalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16307453952L) != 0)) ) {
							((OpLogicalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 234;
						((OpLogicalContext)_localctx).right = logical_instructions(4);
						}
						break;
					case 2:
						{
						_localctx = new OpLogicalContext(new Logical_instructionsContext(_parentctx, _parentState));
						((OpLogicalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_logical_instructions);
						State = 235;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 236;
						((OpLogicalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
							((OpLogicalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 237;
						((OpLogicalContext)_localctx).right = logical_instructions(3);
						}
						break;
					}
					} 
				}
				State = 242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 18, RULE_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			if_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
	 
		public If_statementContext() { }
		public virtual void CopyFrom(If_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : If_statementContext {
		public Logical_instructionsContext ifcondition;
		public ProgContext ifprog;
		public Elif_statementContext elif;
		public Else_statementContext @else;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_statementContext elif_statement() {
			return GetRuleContext<Elif_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		public IfStatementContext(If_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_if_statement);
		int _la;
		try {
			_localctx = new IfStatementContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(T__8);
			State = 246;
			Match(LPAREN);
			State = 247;
			((IfStatementContext)_localctx).ifcondition = logical_instructions(0);
			State = 248;
			Match(RPAREN);
			State = 249;
			Match(LBRACE);
			State = 250;
			((IfStatementContext)_localctx).ifprog = prog();
			State = 251;
			Match(RBRACE);
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 252;
				((IfStatementContext)_localctx).elif = elif_statement();
				}
			}

			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 255;
				((IfStatementContext)_localctx).@else = else_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_statementContext : ParserRuleContext {
		public Elif_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_statement; } }
	 
		public Elif_statementContext() { }
		public virtual void CopyFrom(Elif_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElifStatementContext : Elif_statementContext {
		public Logical_instructionsContext elifcondition;
		public ProgContext elifprog;
		public Elif_statementContext elif;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_statementContext elif_statement() {
			return GetRuleContext<Elif_statementContext>(0);
		}
		public ElifStatementContext(Elif_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterElifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitElifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_statementContext elif_statement() {
		Elif_statementContext _localctx = new Elif_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_elif_statement);
		int _la;
		try {
			_localctx = new ElifStatementContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(T__9);
			State = 259;
			Match(LPAREN);
			State = 260;
			((ElifStatementContext)_localctx).elifcondition = logical_instructions(0);
			State = 261;
			Match(RPAREN);
			State = 262;
			Match(LBRACE);
			State = 263;
			((ElifStatementContext)_localctx).elifprog = prog();
			State = 264;
			Match(RBRACE);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 265;
				((ElifStatementContext)_localctx).elif = elif_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
	 
		public Else_statementContext() { }
		public virtual void CopyFrom(Else_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseStatementContext : Else_statementContext {
		public ProgContext elseprog;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		public ElseStatementContext(Else_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_else_statement);
		try {
			_localctx = new ElseStatementContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(T__10);
			State = 269;
			Match(LBRACE);
			State = 270;
			((ElseStatementContext)_localctx).elseprog = prog();
			State = 271;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
	 
		public LoopContext() { }
		public virtual void CopyFrom(LoopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopStatementContext : LoopContext {
		public Logical_instructionsContext loopcondition;
		public ProgContext loopprog;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		public LoopStatementContext(LoopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 26, RULE_loop);
		try {
			_localctx = new LoopStatementContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(T__11);
			State = 274;
			Match(LPAREN);
			State = 275;
			((LoopStatementContext)_localctx).loopcondition = logical_instructions(0);
			State = 276;
			Match(RPAREN);
			State = 277;
			Match(LBRACE);
			State = 278;
			((LoopStatementContext)_localctx).loopprog = prog();
			State = 279;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public FunctionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsContext functions() {
		FunctionsContext _localctx = new FunctionsContext(Context, State);
		EnterRule(_localctx, 28, RULE_functions);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 281;
				function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				constructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Void_functionContext void_function() {
			return GetRuleContext<Void_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_functionContext int_function() {
			return GetRuleContext<Int_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Float_functionContext float_function() {
			return GetRuleContext<Float_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_functionContext string_function() {
			return GetRuleContext<String_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_functionContext char_function() {
			return GetRuleContext<Char_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_functionContext bool_function() {
			return GetRuleContext<Bool_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_functionContext variable_function() {
			return GetRuleContext<Variable_functionContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 30, RULE_function);
		try {
			State = 292;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 285;
				void_function();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 286;
				int_function();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 287;
				float_function();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 288;
				string_function();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 5);
				{
				State = 289;
				char_function();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 6);
				{
				State = 290;
				bool_function();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 291;
				variable_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
	 
		public ConstructorContext() { }
		public virtual void CopyFrom(ConstructorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructContext : ConstructorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public ConstructContext(ConstructorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 32, RULE_constructor);
		int _la;
		try {
			_localctx = new ConstructContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(VARIABLE);
			State = 295;
			Match(LPAREN);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 296;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 297;
				Match(VARIABLE);
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 298;
					Match(COMMA);
					State = 299;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 300;
					Match(VARIABLE);
					}
					}
					State = 305;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 311;
			Match(RPAREN);
			State = 312;
			Match(LBRACE);
			State = 313;
			prog();
			State = 314;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Void_returnContext void_return() {
			return GetRuleContext<Void_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_returnContext int_return() {
			return GetRuleContext<Int_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Float_returnContext float_return() {
			return GetRuleContext<Float_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_returnContext string_return() {
			return GetRuleContext<String_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_returnContext char_return() {
			return GetRuleContext<Char_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_returnContext bool_return() {
			return GetRuleContext<Bool_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_returnContext variable_return() {
			return GetRuleContext<Variable_returnContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 34, RULE_return);
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316;
				void_return();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317;
				int_return();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 318;
				float_return();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 319;
				string_return();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 320;
				char_return();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 321;
				bool_return();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 322;
				variable_return();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext[] functions() {
			return GetRuleContexts<FunctionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext functions(int i) {
			return GetRuleContext<FunctionsContext>(i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 36, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(T__12);
			State = 326;
			Match(VARIABLE);
			State = 327;
			Match(LBRACE);
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254757624L) != 0)) {
				{
				State = 330;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 328;
					assignment();
					}
					break;
				case 2:
					{
					State = 329;
					functions();
					}
					break;
				}
				}
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 335;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SatukParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SatukParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(SatukParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(SatukParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SatukParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SatukParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(SatukParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(SatukParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR() { return GetTokens(SatukParser.CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR(int i) {
			return GetToken(SatukParser.CHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOOL() { return GetTokens(SatukParser.BOOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL(int i) {
			return GetToken(SatukParser.BOOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public Execute_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterExecute_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitExecute_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_functionContext execute_function() {
		Execute_functionContext _localctx = new Execute_functionContext(Context, State);
		EnterRule(_localctx, 38, RULE_execute_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 337;
					Match(VARIABLE);
					State = 338;
					Match(DOT);
					}
					} 
				}
				State = 343;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 344;
			Match(VARIABLE);
			State = 345;
			Match(LPAREN);
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) {
				{
				{
				State = 346;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 347;
					Match(COMMA);
					State = 348;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 353;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 359;
			Match(RPAREN);
			State = 360;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Void_functionContext : ParserRuleContext {
		public Void_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_void_function; } }
	 
		public Void_functionContext() { }
		public virtual void CopyFrom(Void_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncVoidContext : Void_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Void_returnContext void_return() {
			return GetRuleContext<Void_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncVoidContext(Void_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncVoid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Void_functionContext void_function() {
		Void_functionContext _localctx = new Void_functionContext(Context, State);
		EnterRule(_localctx, 40, RULE_void_function);
		int _la;
		try {
			_localctx = new FuncVoidContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(T__13);
			State = 363;
			Match(VARIABLE);
			State = 364;
			Match(LPAREN);
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 365;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 366;
				Match(VARIABLE);
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 367;
					Match(COMMA);
					State = 368;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 369;
					Match(VARIABLE);
					}
					}
					State = 374;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 380;
			Match(RPAREN);
			State = 381;
			Match(LBRACE);
			State = 382;
			prog();
			State = 383;
			void_return();
			State = 384;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_functionContext : ParserRuleContext {
		public Int_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_function; } }
	 
		public Int_functionContext() { }
		public virtual void CopyFrom(Int_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncIntContext : Int_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_returnContext int_return() {
			return GetRuleContext<Int_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncIntContext(Int_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_functionContext int_function() {
		Int_functionContext _localctx = new Int_functionContext(Context, State);
		EnterRule(_localctx, 42, RULE_int_function);
		int _la;
		try {
			_localctx = new FuncIntContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			Match(T__5);
			State = 387;
			Match(VARIABLE);
			State = 388;
			Match(LPAREN);
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 389;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 390;
				Match(VARIABLE);
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 391;
					Match(COMMA);
					State = 392;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 393;
					Match(VARIABLE);
					}
					}
					State = 398;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 404;
			Match(RPAREN);
			State = 405;
			Match(LBRACE);
			State = 406;
			prog();
			State = 407;
			int_return();
			State = 408;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Float_functionContext : ParserRuleContext {
		public Float_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_function; } }
	 
		public Float_functionContext() { }
		public virtual void CopyFrom(Float_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncFloatContext : Float_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Float_returnContext float_return() {
			return GetRuleContext<Float_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncFloatContext(Float_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Float_functionContext float_function() {
		Float_functionContext _localctx = new Float_functionContext(Context, State);
		EnterRule(_localctx, 44, RULE_float_function);
		int _la;
		try {
			_localctx = new FuncFloatContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(T__6);
			State = 411;
			Match(VARIABLE);
			State = 412;
			Match(LPAREN);
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 413;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 414;
				Match(VARIABLE);
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 415;
					Match(COMMA);
					State = 416;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 417;
					Match(VARIABLE);
					}
					}
					State = 422;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 428;
			Match(RPAREN);
			State = 429;
			Match(LBRACE);
			State = 430;
			prog();
			State = 431;
			float_return();
			State = 432;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_functionContext : ParserRuleContext {
		public String_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_function; } }
	 
		public String_functionContext() { }
		public virtual void CopyFrom(String_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncStringContext : String_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_returnContext string_return() {
			return GetRuleContext<String_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncStringContext(String_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_functionContext string_function() {
		String_functionContext _localctx = new String_functionContext(Context, State);
		EnterRule(_localctx, 46, RULE_string_function);
		int _la;
		try {
			_localctx = new FuncStringContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			Match(T__3);
			State = 435;
			Match(VARIABLE);
			State = 436;
			Match(LPAREN);
			State = 449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 437;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 438;
				Match(VARIABLE);
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 439;
					Match(COMMA);
					State = 440;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 441;
					Match(VARIABLE);
					}
					}
					State = 446;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 452;
			Match(RPAREN);
			State = 453;
			Match(LBRACE);
			State = 454;
			prog();
			State = 455;
			string_return();
			State = 456;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_functionContext : ParserRuleContext {
		public Char_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_function; } }
	 
		public Char_functionContext() { }
		public virtual void CopyFrom(Char_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncCharContext : Char_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_returnContext char_return() {
			return GetRuleContext<Char_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncCharContext(Char_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Char_functionContext char_function() {
		Char_functionContext _localctx = new Char_functionContext(Context, State);
		EnterRule(_localctx, 48, RULE_char_function);
		int _la;
		try {
			_localctx = new FuncCharContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(T__4);
			State = 459;
			Match(VARIABLE);
			State = 460;
			Match(LPAREN);
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 461;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 462;
				Match(VARIABLE);
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 463;
					Match(COMMA);
					State = 464;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 465;
					Match(VARIABLE);
					}
					}
					State = 470;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 476;
			Match(RPAREN);
			State = 477;
			Match(LBRACE);
			State = 478;
			prog();
			State = 479;
			char_return();
			State = 480;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_functionContext : ParserRuleContext {
		public Bool_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_function; } }
	 
		public Bool_functionContext() { }
		public virtual void CopyFrom(Bool_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncBoolContext : Bool_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_returnContext bool_return() {
			return GetRuleContext<Bool_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncBoolContext(Bool_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_functionContext bool_function() {
		Bool_functionContext _localctx = new Bool_functionContext(Context, State);
		EnterRule(_localctx, 50, RULE_bool_function);
		int _la;
		try {
			_localctx = new FuncBoolContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(T__2);
			State = 483;
			Match(VARIABLE);
			State = 484;
			Match(LPAREN);
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 485;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 486;
				Match(VARIABLE);
				State = 492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 487;
					Match(COMMA);
					State = 488;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 489;
					Match(VARIABLE);
					}
					}
					State = 494;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 500;
			Match(RPAREN);
			State = 501;
			Match(LBRACE);
			State = 502;
			prog();
			State = 503;
			bool_return();
			State = 504;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_functionContext : ParserRuleContext {
		public Variable_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_function; } }
	 
		public Variable_functionContext() { }
		public virtual void CopyFrom(Variable_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncVarContext : Variable_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_returnContext variable_return() {
			return GetRuleContext<Variable_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncVarContext(Variable_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_functionContext variable_function() {
		Variable_functionContext _localctx = new Variable_functionContext(Context, State);
		EnterRule(_localctx, 52, RULE_variable_function);
		int _la;
		try {
			_localctx = new FuncVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			Match(VARIABLE);
			State = 507;
			Match(VARIABLE);
			State = 508;
			Match(LPAREN);
			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 509;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 510;
				Match(VARIABLE);
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 511;
					Match(COMMA);
					State = 512;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 513;
					Match(VARIABLE);
					}
					}
					State = 518;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 524;
			Match(RPAREN);
			State = 525;
			Match(LBRACE);
			State = 526;
			prog();
			State = 527;
			variable_return();
			State = 528;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Void_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public Void_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_void_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterVoid_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitVoid_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoid_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Void_returnContext void_return() {
		Void_returnContext _localctx = new Void_returnContext(Context, State);
		EnterRule(_localctx, 54, RULE_void_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			Match(T__14);
			State = 531;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_returnContext : ParserRuleContext {
		public Int_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_return; } }
	 
		public Int_returnContext() { }
		public virtual void CopyFrom(Int_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetIntContext : Int_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		public RetIntContext(Int_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_returnContext int_return() {
		Int_returnContext _localctx = new Int_returnContext(Context, State);
		EnterRule(_localctx, 56, RULE_int_return);
		try {
			_localctx = new RetIntContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(T__14);
			State = 537;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 534;
				Match(INT);
				}
				break;
			case 2:
				{
				State = 535;
				Match(VARIABLE);
				}
				break;
			case 3:
				{
				State = 536;
				arithmetics(0);
				}
				break;
			}
			State = 539;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Float_returnContext : ParserRuleContext {
		public Float_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_return; } }
	 
		public Float_returnContext() { }
		public virtual void CopyFrom(Float_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetFloatContext : Float_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		public RetFloatContext(Float_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Float_returnContext float_return() {
		Float_returnContext _localctx = new Float_returnContext(Context, State);
		EnterRule(_localctx, 58, RULE_float_return);
		try {
			_localctx = new RetFloatContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			Match(T__14);
			State = 545;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 542;
				Match(FLOAT);
				}
				break;
			case 2:
				{
				State = 543;
				Match(VARIABLE);
				}
				break;
			case 3:
				{
				State = 544;
				arithmetics(0);
				}
				break;
			}
			State = 547;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_returnContext : ParserRuleContext {
		public String_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_return; } }
	 
		public String_returnContext() { }
		public virtual void CopyFrom(String_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetStringContext : String_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SatukParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		public RetStringContext(String_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_returnContext string_return() {
		String_returnContext _localctx = new String_returnContext(Context, State);
		EnterRule(_localctx, 60, RULE_string_return);
		int _la;
		try {
			_localctx = new RetStringContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			Match(T__14);
			State = 550;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==VARIABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 551;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_returnContext : ParserRuleContext {
		public Char_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_return; } }
	 
		public Char_returnContext() { }
		public virtual void CopyFrom(Char_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetCharContext : Char_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(SatukParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		public RetCharContext(Char_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Char_returnContext char_return() {
		Char_returnContext _localctx = new Char_returnContext(Context, State);
		EnterRule(_localctx, 62, RULE_char_return);
		int _la;
		try {
			_localctx = new RetCharContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			Match(T__14);
			State = 554;
			_la = TokenStream.LA(1);
			if ( !(_la==CHAR || _la==VARIABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 555;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_returnContext : ParserRuleContext {
		public Bool_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_return; } }
	 
		public Bool_returnContext() { }
		public virtual void CopyFrom(Bool_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetBoolContext : Bool_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SatukParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		public RetBoolContext(Bool_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_returnContext bool_return() {
		Bool_returnContext _localctx = new Bool_returnContext(Context, State);
		EnterRule(_localctx, 64, RULE_bool_return);
		try {
			_localctx = new RetBoolContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			Match(T__14);
			State = 561;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 558;
				Match(BOOL);
				}
				break;
			case 2:
				{
				State = 559;
				Match(VARIABLE);
				}
				break;
			case 3:
				{
				State = 560;
				logical_instructions(0);
				}
				break;
			}
			State = 563;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_returnContext : ParserRuleContext {
		public Variable_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_return; } }
	 
		public Variable_returnContext() { }
		public virtual void CopyFrom(Variable_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetVarContext : Variable_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public RetVarContext(Variable_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_returnContext variable_return() {
		Variable_returnContext _localctx = new Variable_returnContext(Context, State);
		EnterRule(_localctx, 66, RULE_variable_return);
		try {
			_localctx = new RetVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(T__14);
			State = 566;
			Match(VARIABLE);
			State = 567;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return arithmetics_sempred((ArithmeticsContext)_localctx, predIndex);
		case 8: return logical_instructions_sempred((Logical_instructionsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmetics_sempred(ArithmeticsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}
	private bool logical_instructions_sempred(Logical_instructionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,53,570,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,5,0,70,8,0,10,0,
		12,0,73,9,0,1,0,5,0,76,8,0,10,0,12,0,79,9,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		1,1,1,1,1,1,1,1,1,1,1,5,1,93,8,1,10,1,12,1,96,9,1,1,2,1,2,1,2,1,2,1,2,
		1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,112,8,3,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,3,4,123,8,4,1,4,1,4,1,4,1,4,1,4,3,4,130,8,4,1,4,1,4,1,4,
		1,4,1,4,3,4,137,8,4,1,4,1,4,1,4,1,4,1,4,3,4,144,8,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,3,4,155,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		5,4,167,8,4,10,4,12,4,170,9,4,5,4,172,8,4,10,4,12,4,175,9,4,1,4,3,4,178,
		8,4,3,4,180,8,4,1,5,3,5,183,8,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
		6,3,6,195,8,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,203,8,6,10,6,12,6,206,9,6,1,
		7,1,7,1,7,3,7,211,8,7,1,7,1,7,1,7,3,7,216,8,7,3,7,218,8,7,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,3,8,229,8,8,3,8,231,8,8,1,8,1,8,1,8,1,8,1,8,1,
		8,5,8,239,8,8,10,8,12,8,242,9,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,3,10,254,8,10,1,10,3,10,257,8,10,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,3,11,267,8,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,14,1,14,3,14,284,8,14,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,3,15,293,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,5,16,302,8,16,
		10,16,12,16,305,9,16,5,16,307,8,16,10,16,12,16,310,9,16,1,16,1,16,1,16,
		1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,324,8,17,1,18,1,18,1,
		18,1,18,1,18,5,18,331,8,18,10,18,12,18,334,9,18,1,18,1,18,1,19,1,19,5,
		19,340,8,19,10,19,12,19,343,9,19,1,19,1,19,1,19,1,19,1,19,5,19,350,8,19,
		10,19,12,19,353,9,19,5,19,355,8,19,10,19,12,19,358,9,19,1,19,1,19,1,19,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,371,8,20,10,20,12,20,374,
		9,20,5,20,376,8,20,10,20,12,20,379,9,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,395,8,21,10,21,12,21,398,
		9,21,5,21,400,8,21,10,21,12,21,403,9,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,419,8,22,10,22,12,22,422,
		9,22,5,22,424,8,22,10,22,12,22,427,9,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,443,8,23,10,23,12,23,446,
		9,23,5,23,448,8,23,10,23,12,23,451,9,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,467,8,24,10,24,12,24,470,
		9,24,5,24,472,8,24,10,24,12,24,475,9,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,491,8,25,10,25,12,25,494,
		9,25,5,25,496,8,25,10,25,12,25,499,9,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,515,8,26,10,26,12,26,518,
		9,26,5,26,520,8,26,10,26,12,26,523,9,26,1,26,1,26,1,26,1,26,1,26,1,26,
		1,27,1,27,1,27,1,28,1,28,1,28,1,28,3,28,538,8,28,1,28,1,28,1,29,1,29,1,
		29,1,29,3,29,546,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,
		1,32,1,32,1,32,1,32,3,32,562,8,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,0,
		2,12,16,34,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,64,66,0,10,1,0,48,52,1,0,48,53,2,0,3,7,53,
		53,3,0,48,48,51,51,53,53,1,0,40,42,1,0,38,39,2,0,26,27,30,33,1,0,34,35,
		2,0,49,49,53,53,1,0,52,53,623,0,71,1,0,0,0,2,94,1,0,0,0,4,97,1,0,0,0,6,
		111,1,0,0,0,8,179,1,0,0,0,10,182,1,0,0,0,12,194,1,0,0,0,14,217,1,0,0,0,
		16,230,1,0,0,0,18,243,1,0,0,0,20,245,1,0,0,0,22,258,1,0,0,0,24,268,1,0,
		0,0,26,273,1,0,0,0,28,283,1,0,0,0,30,292,1,0,0,0,32,294,1,0,0,0,34,323,
		1,0,0,0,36,325,1,0,0,0,38,341,1,0,0,0,40,362,1,0,0,0,42,386,1,0,0,0,44,
		410,1,0,0,0,46,434,1,0,0,0,48,458,1,0,0,0,50,482,1,0,0,0,52,506,1,0,0,
		0,54,530,1,0,0,0,56,533,1,0,0,0,58,541,1,0,0,0,60,549,1,0,0,0,62,553,1,
		0,0,0,64,557,1,0,0,0,66,565,1,0,0,0,68,70,3,36,18,0,69,68,1,0,0,0,70,73,
		1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,77,1,0,0,0,73,71,1,0,0,0,74,76,
		3,28,14,0,75,74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,80,
		1,0,0,0,79,77,1,0,0,0,80,81,5,1,0,0,81,82,5,18,0,0,82,83,3,2,1,0,83,84,
		3,34,17,0,84,85,5,19,0,0,85,1,1,0,0,0,86,93,3,8,4,0,87,93,3,18,9,0,88,
		93,3,26,13,0,89,93,3,4,2,0,90,93,3,38,19,0,91,93,3,14,7,0,92,86,1,0,0,
		0,92,87,1,0,0,0,92,88,1,0,0,0,92,89,1,0,0,0,92,90,1,0,0,0,92,91,1,0,0,
		0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,3,1,0,0,0,96,94,1,0,0,0,
		97,98,5,2,0,0,98,99,5,16,0,0,99,100,3,6,3,0,100,101,5,17,0,0,101,102,5,
		22,0,0,102,5,1,0,0,0,103,112,5,49,0,0,104,112,5,53,0,0,105,112,5,52,0,
		0,106,112,5,48,0,0,107,112,5,51,0,0,108,112,5,50,0,0,109,112,3,12,6,0,
		110,112,3,16,8,0,111,103,1,0,0,0,111,104,1,0,0,0,111,105,1,0,0,0,111,106,
		1,0,0,0,111,107,1,0,0,0,111,108,1,0,0,0,111,109,1,0,0,0,111,110,1,0,0,
		0,112,7,1,0,0,0,113,114,5,53,0,0,114,115,5,25,0,0,115,116,3,12,6,0,116,
		117,5,22,0,0,117,180,1,0,0,0,118,119,5,3,0,0,119,122,5,53,0,0,120,121,
		5,25,0,0,121,123,3,16,8,0,122,120,1,0,0,0,122,123,1,0,0,0,123,124,1,0,
		0,0,124,180,5,22,0,0,125,126,5,4,0,0,126,129,5,53,0,0,127,128,5,25,0,0,
		128,130,5,49,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,131,1,0,0,0,131,180,
		5,22,0,0,132,133,5,5,0,0,133,136,5,53,0,0,134,135,5,25,0,0,135,137,5,52,
		0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,138,1,0,0,0,138,180,5,22,0,0,139,
		140,5,6,0,0,140,143,5,53,0,0,141,142,5,25,0,0,142,144,3,12,6,0,143,141,
		1,0,0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,180,5,22,0,0,146,147,5,53,
		0,0,147,148,5,25,0,0,148,149,7,0,0,0,149,180,5,22,0,0,150,151,5,7,0,0,
		151,154,5,53,0,0,152,153,5,25,0,0,153,155,3,12,6,0,154,152,1,0,0,0,154,
		155,1,0,0,0,155,156,1,0,0,0,156,180,5,22,0,0,157,158,5,53,0,0,158,177,
		5,53,0,0,159,160,5,25,0,0,160,161,5,8,0,0,161,162,5,53,0,0,162,173,5,16,
		0,0,163,168,7,1,0,0,164,165,5,23,0,0,165,167,7,1,0,0,166,164,1,0,0,0,167,
		170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,172,1,0,0,0,170,168,1,
		0,0,0,171,163,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,
		174,176,1,0,0,0,175,173,1,0,0,0,176,178,5,17,0,0,177,159,1,0,0,0,177,178,
		1,0,0,0,178,180,1,0,0,0,179,113,1,0,0,0,179,118,1,0,0,0,179,125,1,0,0,
		0,179,132,1,0,0,0,179,139,1,0,0,0,179,146,1,0,0,0,179,150,1,0,0,0,179,
		157,1,0,0,0,180,9,1,0,0,0,181,183,7,2,0,0,182,181,1,0,0,0,182,183,1,0,
		0,0,183,184,1,0,0,0,184,185,5,53,0,0,185,186,5,25,0,0,186,187,3,38,19,
		0,187,11,1,0,0,0,188,189,6,6,-1,0,189,190,5,16,0,0,190,191,3,12,6,0,191,
		192,5,17,0,0,192,195,1,0,0,0,193,195,7,3,0,0,194,188,1,0,0,0,194,193,1,
		0,0,0,195,204,1,0,0,0,196,197,10,4,0,0,197,198,7,4,0,0,198,203,3,12,6,
		5,199,200,10,3,0,0,200,201,7,5,0,0,201,203,3,12,6,4,202,196,1,0,0,0,202,
		199,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,13,1,0,
		0,0,206,204,1,0,0,0,207,208,5,53,0,0,208,210,5,36,0,0,209,211,5,22,0,0,
		210,209,1,0,0,0,210,211,1,0,0,0,211,218,1,0,0,0,212,213,5,53,0,0,213,215,
		5,37,0,0,214,216,5,22,0,0,215,214,1,0,0,0,215,216,1,0,0,0,216,218,1,0,
		0,0,217,207,1,0,0,0,217,212,1,0,0,0,218,15,1,0,0,0,219,220,6,8,-1,0,220,
		221,5,28,0,0,221,231,3,16,8,4,222,229,5,51,0,0,223,229,5,48,0,0,224,229,
		5,53,0,0,225,229,5,50,0,0,226,229,5,53,0,0,227,229,3,12,6,0,228,222,1,
		0,0,0,228,223,1,0,0,0,228,224,1,0,0,0,228,225,1,0,0,0,228,226,1,0,0,0,
		228,227,1,0,0,0,229,231,1,0,0,0,230,219,1,0,0,0,230,228,1,0,0,0,231,240,
		1,0,0,0,232,233,10,3,0,0,233,234,7,6,0,0,234,239,3,16,8,4,235,236,10,2,
		0,0,236,237,7,7,0,0,237,239,3,16,8,3,238,232,1,0,0,0,238,235,1,0,0,0,239,
		242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,17,1,0,0,0,242,240,1,0,
		0,0,243,244,3,20,10,0,244,19,1,0,0,0,245,246,5,9,0,0,246,247,5,16,0,0,
		247,248,3,16,8,0,248,249,5,17,0,0,249,250,5,18,0,0,250,251,3,2,1,0,251,
		253,5,19,0,0,252,254,3,22,11,0,253,252,1,0,0,0,253,254,1,0,0,0,254,256,
		1,0,0,0,255,257,3,24,12,0,256,255,1,0,0,0,256,257,1,0,0,0,257,21,1,0,0,
		0,258,259,5,10,0,0,259,260,5,16,0,0,260,261,3,16,8,0,261,262,5,17,0,0,
		262,263,5,18,0,0,263,264,3,2,1,0,264,266,5,19,0,0,265,267,3,22,11,0,266,
		265,1,0,0,0,266,267,1,0,0,0,267,23,1,0,0,0,268,269,5,11,0,0,269,270,5,
		18,0,0,270,271,3,2,1,0,271,272,5,19,0,0,272,25,1,0,0,0,273,274,5,12,0,
		0,274,275,5,16,0,0,275,276,3,16,8,0,276,277,5,17,0,0,277,278,5,18,0,0,
		278,279,3,2,1,0,279,280,5,19,0,0,280,27,1,0,0,0,281,284,3,30,15,0,282,
		284,3,32,16,0,283,281,1,0,0,0,283,282,1,0,0,0,284,29,1,0,0,0,285,293,3,
		40,20,0,286,293,3,42,21,0,287,293,3,44,22,0,288,293,3,46,23,0,289,293,
		3,48,24,0,290,293,3,50,25,0,291,293,3,52,26,0,292,285,1,0,0,0,292,286,
		1,0,0,0,292,287,1,0,0,0,292,288,1,0,0,0,292,289,1,0,0,0,292,290,1,0,0,
		0,292,291,1,0,0,0,293,31,1,0,0,0,294,295,5,53,0,0,295,308,5,16,0,0,296,
		297,7,2,0,0,297,303,5,53,0,0,298,299,5,23,0,0,299,300,7,2,0,0,300,302,
		5,53,0,0,301,298,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,
		0,304,307,1,0,0,0,305,303,1,0,0,0,306,296,1,0,0,0,307,310,1,0,0,0,308,
		306,1,0,0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,308,1,0,0,0,311,312,5,
		17,0,0,312,313,5,18,0,0,313,314,3,2,1,0,314,315,5,19,0,0,315,33,1,0,0,
		0,316,324,3,54,27,0,317,324,3,56,28,0,318,324,3,58,29,0,319,324,3,60,30,
		0,320,324,3,62,31,0,321,324,3,64,32,0,322,324,3,66,33,0,323,316,1,0,0,
		0,323,317,1,0,0,0,323,318,1,0,0,0,323,319,1,0,0,0,323,320,1,0,0,0,323,
		321,1,0,0,0,323,322,1,0,0,0,324,35,1,0,0,0,325,326,5,13,0,0,326,327,5,
		53,0,0,327,332,5,18,0,0,328,331,3,8,4,0,329,331,3,28,14,0,330,328,1,0,
		0,0,330,329,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,
		335,1,0,0,0,334,332,1,0,0,0,335,336,5,19,0,0,336,37,1,0,0,0,337,338,5,
		53,0,0,338,340,5,24,0,0,339,337,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,
		0,341,342,1,0,0,0,342,344,1,0,0,0,343,341,1,0,0,0,344,345,5,53,0,0,345,
		356,5,16,0,0,346,351,7,1,0,0,347,348,5,23,0,0,348,350,7,1,0,0,349,347,
		1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,355,1,0,0,
		0,353,351,1,0,0,0,354,346,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,
		357,1,0,0,0,357,359,1,0,0,0,358,356,1,0,0,0,359,360,5,17,0,0,360,361,5,
		22,0,0,361,39,1,0,0,0,362,363,5,14,0,0,363,364,5,53,0,0,364,377,5,16,0,
		0,365,366,7,2,0,0,366,372,5,53,0,0,367,368,5,23,0,0,368,369,7,2,0,0,369,
		371,5,53,0,0,370,367,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,
		0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,375,365,1,0,0,0,376,379,1,0,0,0,
		377,375,1,0,0,0,377,378,1,0,0,0,378,380,1,0,0,0,379,377,1,0,0,0,380,381,
		5,17,0,0,381,382,5,18,0,0,382,383,3,2,1,0,383,384,3,54,27,0,384,385,5,
		19,0,0,385,41,1,0,0,0,386,387,5,6,0,0,387,388,5,53,0,0,388,401,5,16,0,
		0,389,390,7,2,0,0,390,396,5,53,0,0,391,392,5,23,0,0,392,393,7,2,0,0,393,
		395,5,53,0,0,394,391,1,0,0,0,395,398,1,0,0,0,396,394,1,0,0,0,396,397,1,
		0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,399,389,1,0,0,0,400,403,1,0,0,0,
		401,399,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,401,1,0,0,0,404,405,
		5,17,0,0,405,406,5,18,0,0,406,407,3,2,1,0,407,408,3,56,28,0,408,409,5,
		19,0,0,409,43,1,0,0,0,410,411,5,7,0,0,411,412,5,53,0,0,412,425,5,16,0,
		0,413,414,7,2,0,0,414,420,5,53,0,0,415,416,5,23,0,0,416,417,7,2,0,0,417,
		419,5,53,0,0,418,415,1,0,0,0,419,422,1,0,0,0,420,418,1,0,0,0,420,421,1,
		0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,423,413,1,0,0,0,424,427,1,0,0,0,
		425,423,1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,425,1,0,0,0,428,429,
		5,17,0,0,429,430,5,18,0,0,430,431,3,2,1,0,431,432,3,58,29,0,432,433,5,
		19,0,0,433,45,1,0,0,0,434,435,5,4,0,0,435,436,5,53,0,0,436,449,5,16,0,
		0,437,438,7,2,0,0,438,444,5,53,0,0,439,440,5,23,0,0,440,441,7,2,0,0,441,
		443,5,53,0,0,442,439,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,445,1,
		0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,447,437,1,0,0,0,448,451,1,0,0,0,
		449,447,1,0,0,0,449,450,1,0,0,0,450,452,1,0,0,0,451,449,1,0,0,0,452,453,
		5,17,0,0,453,454,5,18,0,0,454,455,3,2,1,0,455,456,3,60,30,0,456,457,5,
		19,0,0,457,47,1,0,0,0,458,459,5,5,0,0,459,460,5,53,0,0,460,473,5,16,0,
		0,461,462,7,2,0,0,462,468,5,53,0,0,463,464,5,23,0,0,464,465,7,2,0,0,465,
		467,5,53,0,0,466,463,1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,468,469,1,
		0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,471,461,1,0,0,0,472,475,1,0,0,0,
		473,471,1,0,0,0,473,474,1,0,0,0,474,476,1,0,0,0,475,473,1,0,0,0,476,477,
		5,17,0,0,477,478,5,18,0,0,478,479,3,2,1,0,479,480,3,62,31,0,480,481,5,
		19,0,0,481,49,1,0,0,0,482,483,5,3,0,0,483,484,5,53,0,0,484,497,5,16,0,
		0,485,486,7,2,0,0,486,492,5,53,0,0,487,488,5,23,0,0,488,489,7,2,0,0,489,
		491,5,53,0,0,490,487,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,493,1,
		0,0,0,493,496,1,0,0,0,494,492,1,0,0,0,495,485,1,0,0,0,496,499,1,0,0,0,
		497,495,1,0,0,0,497,498,1,0,0,0,498,500,1,0,0,0,499,497,1,0,0,0,500,501,
		5,17,0,0,501,502,5,18,0,0,502,503,3,2,1,0,503,504,3,64,32,0,504,505,5,
		19,0,0,505,51,1,0,0,0,506,507,5,53,0,0,507,508,5,53,0,0,508,521,5,16,0,
		0,509,510,7,2,0,0,510,516,5,53,0,0,511,512,5,23,0,0,512,513,7,2,0,0,513,
		515,5,53,0,0,514,511,1,0,0,0,515,518,1,0,0,0,516,514,1,0,0,0,516,517,1,
		0,0,0,517,520,1,0,0,0,518,516,1,0,0,0,519,509,1,0,0,0,520,523,1,0,0,0,
		521,519,1,0,0,0,521,522,1,0,0,0,522,524,1,0,0,0,523,521,1,0,0,0,524,525,
		5,17,0,0,525,526,5,18,0,0,526,527,3,2,1,0,527,528,3,66,33,0,528,529,5,
		19,0,0,529,53,1,0,0,0,530,531,5,15,0,0,531,532,5,22,0,0,532,55,1,0,0,0,
		533,537,5,15,0,0,534,538,5,48,0,0,535,538,5,53,0,0,536,538,3,12,6,0,537,
		534,1,0,0,0,537,535,1,0,0,0,537,536,1,0,0,0,538,539,1,0,0,0,539,540,5,
		22,0,0,540,57,1,0,0,0,541,545,5,15,0,0,542,546,5,51,0,0,543,546,5,53,0,
		0,544,546,3,12,6,0,545,542,1,0,0,0,545,543,1,0,0,0,545,544,1,0,0,0,546,
		547,1,0,0,0,547,548,5,22,0,0,548,59,1,0,0,0,549,550,5,15,0,0,550,551,7,
		8,0,0,551,552,5,22,0,0,552,61,1,0,0,0,553,554,5,15,0,0,554,555,7,9,0,0,
		555,556,5,22,0,0,556,63,1,0,0,0,557,561,5,15,0,0,558,562,5,50,0,0,559,
		562,5,53,0,0,560,562,3,16,8,0,561,558,1,0,0,0,561,559,1,0,0,0,561,560,
		1,0,0,0,562,563,1,0,0,0,563,564,5,22,0,0,564,65,1,0,0,0,565,566,5,15,0,
		0,566,567,5,53,0,0,567,568,5,22,0,0,568,67,1,0,0,0,55,71,77,92,94,111,
		122,129,136,143,154,168,173,177,179,182,194,202,204,210,215,217,228,230,
		238,240,253,256,266,283,292,303,308,323,330,332,341,351,356,372,377,396,
		401,420,425,444,449,468,473,492,497,516,521,537,545,561
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
