//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Msi/RiderProjects/Satuk/Satuk/Satuk.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SatukParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, LPAREN=16, 
		RPAREN=17, LBRACE=18, RBRACE=19, LBRACK=20, RBRACK=21, SEMICOLON=22, COMMA=23, 
		DOT=24, ASSIGN=25, GT=26, LT=27, NOT=28, QUESTION=29, EQUAL=30, LE=31, 
		GE=32, NOTEQUAL=33, AND=34, OR=35, INC=36, DEC=37, ADD=38, SUB=39, MUL=40, 
		DIV=41, MOD=42, ADD_ASSIGN=43, SUB_ASSIGN=44, MUL_ASSIGN=45, DIV_ASSIGN=46, 
		WS=47, INT=48, STRING=49, BOOL=50, FLOAT=51, CHAR=52, VARIABLE=53;
	public const int
		RULE_program = 0, RULE_prog = 1, RULE_print = 2, RULE_assignment = 3, 
		RULE_assign_bool = 4, RULE_assign_bool_logical = 5, RULE_assign_bool_dynamic = 6, 
		RULE_assign_string = 7, RULE_assign_string_dynamic = 8, RULE_assign_char = 9, 
		RULE_assign_char_dynamic = 10, RULE_assign_int_constant = 11, RULE_assign_int_ar = 12, 
		RULE_assign_int_dynamic = 13, RULE_assign_float_constant = 14, RULE_assign_float_dynamic = 15, 
		RULE_assign_float_ar = 16, RULE_assignment_class = 17, RULE_assignment_function = 18, 
		RULE_arithmetics = 19, RULE_arithmetics_int = 20, RULE_arithmetics_float = 21, 
		RULE_mutators = 22, RULE_int_inc = 23, RULE_float_inc = 24, RULE_int_dec = 25, 
		RULE_float_dec = 26, RULE_variable_inc = 27, RULE_variable_dec = 28, RULE_logical_instructions = 29, 
		RULE_logical_bool = 30, RULE_logical_numeric = 31, RULE_logical_text = 32, 
		RULE_logical_var = 33, RULE_if_statement = 34, RULE_loop = 35, RULE_print_content = 36, 
		RULE_functions = 37, RULE_function = 38, RULE_constructor = 39, RULE_return = 40, 
		RULE_class = 41, RULE_execute_function = 42, RULE_void_function = 43, 
		RULE_int_function = 44, RULE_float_function = 45, RULE_string_function = 46, 
		RULE_char_function = 47, RULE_bool_function = 48, RULE_variable_function = 49, 
		RULE_void_return = 50, RULE_int_return = 51, RULE_float_return = 52, RULE_string_return = 53, 
		RULE_char_return = 54, RULE_bool_return = 55, RULE_variable_return = 56;
	public static readonly string[] ruleNames = {
		"program", "prog", "print", "assignment", "assign_bool", "assign_bool_logical", 
		"assign_bool_dynamic", "assign_string", "assign_string_dynamic", "assign_char", 
		"assign_char_dynamic", "assign_int_constant", "assign_int_ar", "assign_int_dynamic", 
		"assign_float_constant", "assign_float_dynamic", "assign_float_ar", "assignment_class", 
		"assignment_function", "arithmetics", "arithmetics_int", "arithmetics_float", 
		"mutators", "int_inc", "float_inc", "int_dec", "float_dec", "variable_inc", 
		"variable_dec", "logical_instructions", "logical_bool", "logical_numeric", 
		"logical_text", "logical_var", "if_statement", "loop", "print_content", 
		"functions", "function", "constructor", "return", "class", "execute_function", 
		"void_function", "int_function", "float_function", "string_function", 
		"char_function", "bool_function", "variable_function", "void_return", 
		"int_return", "float_return", "string_return", "char_return", "bool_return", 
		"variable_return"
	};

	private static readonly string[] _LiteralNames = {
		null, "'program'", "'display'", "'bool'", "'string'", "'char'", "'int'", 
		"'float'", "'new'", "'if'", "'else if'", "'else'", "'loop'", "'class'", 
		"'void'", "'return'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", 
		"','", "'.'", "'='", "'>'", "'<'", "'!'", "'?'", "'=='", "'<='", "'>='", 
		null, "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'+='", "'-='", "'*='", "'/='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
		"RBRACK", "SEMICOLON", "COMMA", "DOT", "ASSIGN", "GT", "LT", "NOT", "QUESTION", 
		"EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", 
		"MUL", "DIV", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
		"WS", "INT", "STRING", "BOOL", "FLOAT", "CHAR", "VARIABLE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Satuk.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SatukParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SatukParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SatukParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext[] functions() {
			return GetRuleContexts<FunctionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext functions(int i) {
			return GetRuleContext<FunctionsContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 114;
				@class();
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254757624L) != 0)) {
				{
				{
				State = 120;
				functions();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 126;
			Match(T__0);
			State = 127;
			Match(LBRACE);
			State = 128;
			prog();
			State = 129;
			@return();
			State = 130;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext[] if_statement() {
			return GetRuleContexts<If_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement(int i) {
			return GetRuleContext<If_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext[] loop() {
			return GetRuleContexts<LoopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop(int i) {
			return GetRuleContext<LoopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext[] print() {
			return GetRuleContexts<PrintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print(int i) {
			return GetRuleContext<PrintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_functionContext[] execute_function() {
			return GetRuleContexts<Execute_functionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_functionContext execute_function(int i) {
			return GetRuleContext<Execute_functionContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 2, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254745852L) != 0)) {
				{
				State = 137;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 132;
					assignment();
					}
					break;
				case 2:
					{
					State = 133;
					if_statement();
					}
					break;
				case 3:
					{
					State = 134;
					loop();
					}
					break;
				case 4:
					{
					State = 135;
					print();
					}
					break;
				case 5:
					{
					State = 136;
					execute_function();
					}
					break;
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
	 
		public PrintContext() { }
		public virtual void CopyFrom(PrintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DisplayContext : PrintContext {
		public Print_contentContext result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Print_contentContext print_content() {
			return GetRuleContext<Print_contentContext>(0);
		}
		public DisplayContext(PrintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 4, RULE_print);
		try {
			_localctx = new DisplayContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(T__1);
			State = 143;
			Match(LPAREN);
			State = 144;
			((DisplayContext)_localctx).result = print_content();
			State = 145;
			Match(RPAREN);
			State = 146;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assign_charContext assign_char() {
			return GetRuleContext<Assign_charContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_stringContext assign_string() {
			return GetRuleContext<Assign_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_float_constantContext assign_float_constant() {
			return GetRuleContext<Assign_float_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_boolContext assign_bool() {
			return GetRuleContext<Assign_boolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_int_arContext assign_int_ar() {
			return GetRuleContext<Assign_int_arContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_int_constantContext assign_int_constant() {
			return GetRuleContext<Assign_int_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_float_arContext assign_float_ar() {
			return GetRuleContext<Assign_float_arContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_bool_logicalContext assign_bool_logical() {
			return GetRuleContext<Assign_bool_logicalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_classContext assignment_class() {
			return GetRuleContext<Assignment_classContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_bool_dynamicContext assign_bool_dynamic() {
			return GetRuleContext<Assign_bool_dynamicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_char_dynamicContext assign_char_dynamic() {
			return GetRuleContext<Assign_char_dynamicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_float_dynamicContext assign_float_dynamic() {
			return GetRuleContext<Assign_float_dynamicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_int_dynamicContext assign_int_dynamic() {
			return GetRuleContext<Assign_int_dynamicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_string_dynamicContext assign_string_dynamic() {
			return GetRuleContext<Assign_string_dynamicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_functionContext assignment_function() {
			return GetRuleContext<Assignment_functionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 148;
				assign_char();
				}
				break;
			case 2:
				{
				State = 149;
				assign_string();
				}
				break;
			case 3:
				{
				State = 150;
				assign_float_constant();
				}
				break;
			case 4:
				{
				State = 151;
				assign_bool();
				}
				break;
			case 5:
				{
				State = 152;
				assign_int_ar();
				}
				break;
			case 6:
				{
				State = 153;
				assign_int_constant();
				}
				break;
			case 7:
				{
				State = 154;
				assign_float_ar();
				}
				break;
			case 8:
				{
				State = 155;
				assign_bool_logical();
				}
				break;
			case 9:
				{
				State = 156;
				assignment_class();
				}
				break;
			case 10:
				{
				State = 157;
				assign_bool_dynamic();
				}
				break;
			case 11:
				{
				State = 158;
				assign_char_dynamic();
				}
				break;
			case 12:
				{
				State = 159;
				assign_float_dynamic();
				}
				break;
			case 13:
				{
				State = 160;
				assign_int_dynamic();
				}
				break;
			case 14:
				{
				State = 161;
				assign_string_dynamic();
				}
				break;
			case 15:
				{
				State = 162;
				assignment_function();
				}
				break;
			}
			State = 165;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_boolContext : ParserRuleContext {
		public Assign_boolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_bool; } }
	 
		public Assign_boolContext() { }
		public virtual void CopyFrom(Assign_boolContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolAssContext : Assign_boolContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SatukParser.BOOL, 0); }
		public BoolAssContext(Assign_boolContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterBoolAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitBoolAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_boolContext assign_bool() {
		Assign_boolContext _localctx = new Assign_boolContext(Context, State);
		EnterRule(_localctx, 8, RULE_assign_bool);
		int _la;
		try {
			_localctx = new BoolAssContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(T__2);
			State = 168;
			Match(VARIABLE);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 169;
				Match(ASSIGN);
				State = 170;
				Match(BOOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_bool_logicalContext : ParserRuleContext {
		public Assign_bool_logicalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_bool_logical; } }
	 
		public Assign_bool_logicalContext() { }
		public virtual void CopyFrom(Assign_bool_logicalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolLogAssContext : Assign_bool_logicalContext {
		public Logical_instructionsContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		public BoolLogAssContext(Assign_bool_logicalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterBoolLogAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitBoolLogAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLogAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_bool_logicalContext assign_bool_logical() {
		Assign_bool_logicalContext _localctx = new Assign_bool_logicalContext(Context, State);
		EnterRule(_localctx, 10, RULE_assign_bool_logical);
		try {
			_localctx = new BoolLogAssContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(VARIABLE);
			State = 174;
			Match(ASSIGN);
			State = 175;
			((BoolLogAssContext)_localctx).expr = logical_instructions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_bool_dynamicContext : ParserRuleContext {
		public Assign_bool_dynamicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_bool_dynamic; } }
	 
		public Assign_bool_dynamicContext() { }
		public virtual void CopyFrom(Assign_bool_dynamicContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolDynAssContext : Assign_bool_dynamicContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SatukParser.BOOL, 0); }
		public BoolDynAssContext(Assign_bool_dynamicContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterBoolDynAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitBoolDynAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolDynAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_bool_dynamicContext assign_bool_dynamic() {
		Assign_bool_dynamicContext _localctx = new Assign_bool_dynamicContext(Context, State);
		EnterRule(_localctx, 12, RULE_assign_bool_dynamic);
		try {
			_localctx = new BoolDynAssContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(VARIABLE);
			State = 178;
			Match(ASSIGN);
			State = 179;
			Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_stringContext : ParserRuleContext {
		public Assign_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_string; } }
	 
		public Assign_stringContext() { }
		public virtual void CopyFrom(Assign_stringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringAssContext : Assign_stringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SatukParser.STRING, 0); }
		public StringAssContext(Assign_stringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterStringAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitStringAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_stringContext assign_string() {
		Assign_stringContext _localctx = new Assign_stringContext(Context, State);
		EnterRule(_localctx, 14, RULE_assign_string);
		int _la;
		try {
			_localctx = new StringAssContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(T__3);
			State = 182;
			Match(VARIABLE);
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 183;
				Match(ASSIGN);
				State = 184;
				Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_string_dynamicContext : ParserRuleContext {
		public Assign_string_dynamicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_string_dynamic; } }
	 
		public Assign_string_dynamicContext() { }
		public virtual void CopyFrom(Assign_string_dynamicContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringDynAssContext : Assign_string_dynamicContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SatukParser.STRING, 0); }
		public StringDynAssContext(Assign_string_dynamicContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterStringDynAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitStringDynAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDynAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_string_dynamicContext assign_string_dynamic() {
		Assign_string_dynamicContext _localctx = new Assign_string_dynamicContext(Context, State);
		EnterRule(_localctx, 16, RULE_assign_string_dynamic);
		try {
			_localctx = new StringDynAssContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(VARIABLE);
			State = 188;
			Match(ASSIGN);
			State = 189;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_charContext : ParserRuleContext {
		public Assign_charContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_char; } }
	 
		public Assign_charContext() { }
		public virtual void CopyFrom(Assign_charContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CharAssContext : Assign_charContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(SatukParser.CHAR, 0); }
		public CharAssContext(Assign_charContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterCharAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitCharAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_charContext assign_char() {
		Assign_charContext _localctx = new Assign_charContext(Context, State);
		EnterRule(_localctx, 18, RULE_assign_char);
		int _la;
		try {
			_localctx = new CharAssContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T__4);
			State = 192;
			Match(VARIABLE);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 193;
				Match(ASSIGN);
				State = 194;
				Match(CHAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_char_dynamicContext : ParserRuleContext {
		public Assign_char_dynamicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_char_dynamic; } }
	 
		public Assign_char_dynamicContext() { }
		public virtual void CopyFrom(Assign_char_dynamicContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CharDynAssContext : Assign_char_dynamicContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(SatukParser.CHAR, 0); }
		public CharDynAssContext(Assign_char_dynamicContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterCharDynAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitCharDynAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharDynAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_char_dynamicContext assign_char_dynamic() {
		Assign_char_dynamicContext _localctx = new Assign_char_dynamicContext(Context, State);
		EnterRule(_localctx, 20, RULE_assign_char_dynamic);
		try {
			_localctx = new CharDynAssContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(VARIABLE);
			State = 198;
			Match(ASSIGN);
			State = 199;
			Match(CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_int_constantContext : ParserRuleContext {
		public Assign_int_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_int_constant; } }
	 
		public Assign_int_constantContext() { }
		public virtual void CopyFrom(Assign_int_constantContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntConstAssContext : Assign_int_constantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		public IntConstAssContext(Assign_int_constantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterIntConstAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitIntConstAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntConstAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_int_constantContext assign_int_constant() {
		Assign_int_constantContext _localctx = new Assign_int_constantContext(Context, State);
		EnterRule(_localctx, 22, RULE_assign_int_constant);
		int _la;
		try {
			_localctx = new IntConstAssContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(T__5);
			State = 202;
			Match(VARIABLE);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 203;
				Match(ASSIGN);
				State = 204;
				Match(INT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_int_arContext : ParserRuleContext {
		public Assign_int_arContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_int_ar; } }
	 
		public Assign_int_arContext() { }
		public virtual void CopyFrom(Assign_int_arContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntArAssContext : Assign_int_arContext {
		public Arithmetics_intContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetics_intContext arithmetics_int() {
			return GetRuleContext<Arithmetics_intContext>(0);
		}
		public IntArAssContext(Assign_int_arContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterIntArAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitIntArAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_int_arContext assign_int_ar() {
		Assign_int_arContext _localctx = new Assign_int_arContext(Context, State);
		EnterRule(_localctx, 24, RULE_assign_int_ar);
		try {
			_localctx = new IntArAssContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(VARIABLE);
			State = 208;
			Match(ASSIGN);
			State = 209;
			((IntArAssContext)_localctx).expr = arithmetics_int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_int_dynamicContext : ParserRuleContext {
		public Assign_int_dynamicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_int_dynamic; } }
	 
		public Assign_int_dynamicContext() { }
		public virtual void CopyFrom(Assign_int_dynamicContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntDynAssContext : Assign_int_dynamicContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		public IntDynAssContext(Assign_int_dynamicContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterIntDynAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitIntDynAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntDynAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_int_dynamicContext assign_int_dynamic() {
		Assign_int_dynamicContext _localctx = new Assign_int_dynamicContext(Context, State);
		EnterRule(_localctx, 26, RULE_assign_int_dynamic);
		try {
			_localctx = new IntDynAssContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(VARIABLE);
			State = 212;
			Match(ASSIGN);
			State = 213;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_float_constantContext : ParserRuleContext {
		public Assign_float_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_float_constant; } }
	 
		public Assign_float_constantContext() { }
		public virtual void CopyFrom(Assign_float_constantContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FloatConstAssContext : Assign_float_constantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		public FloatConstAssContext(Assign_float_constantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFloatConstAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFloatConstAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatConstAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_float_constantContext assign_float_constant() {
		Assign_float_constantContext _localctx = new Assign_float_constantContext(Context, State);
		EnterRule(_localctx, 28, RULE_assign_float_constant);
		int _la;
		try {
			_localctx = new FloatConstAssContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(T__6);
			State = 216;
			Match(VARIABLE);
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 217;
				Match(ASSIGN);
				State = 218;
				Match(FLOAT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_float_dynamicContext : ParserRuleContext {
		public Assign_float_dynamicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_float_dynamic; } }
	 
		public Assign_float_dynamicContext() { }
		public virtual void CopyFrom(Assign_float_dynamicContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FloatDynAssContext : Assign_float_dynamicContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		public FloatDynAssContext(Assign_float_dynamicContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFloatDynAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFloatDynAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatDynAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_float_dynamicContext assign_float_dynamic() {
		Assign_float_dynamicContext _localctx = new Assign_float_dynamicContext(Context, State);
		EnterRule(_localctx, 30, RULE_assign_float_dynamic);
		try {
			_localctx = new FloatDynAssContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(VARIABLE);
			State = 222;
			Match(ASSIGN);
			State = 223;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_float_arContext : ParserRuleContext {
		public Assign_float_arContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_float_ar; } }
	 
		public Assign_float_arContext() { }
		public virtual void CopyFrom(Assign_float_arContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FloatArAssContext : Assign_float_arContext {
		public Arithmetics_floatContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetics_floatContext arithmetics_float() {
			return GetRuleContext<Arithmetics_floatContext>(0);
		}
		public FloatArAssContext(Assign_float_arContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFloatArAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFloatArAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatArAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_float_arContext assign_float_ar() {
		Assign_float_arContext _localctx = new Assign_float_arContext(Context, State);
		EnterRule(_localctx, 32, RULE_assign_float_ar);
		try {
			_localctx = new FloatArAssContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(VARIABLE);
			State = 226;
			Match(ASSIGN);
			State = 227;
			((FloatArAssContext)_localctx).expr = arithmetics_float();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_classContext : ParserRuleContext {
		public Assignment_classContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_class; } }
	 
		public Assignment_classContext() { }
		public virtual void CopyFrom(Assignment_classContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassAssContext : Assignment_classContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(SatukParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(SatukParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SatukParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SatukParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(SatukParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(SatukParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR() { return GetTokens(SatukParser.CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR(int i) {
			return GetToken(SatukParser.CHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOOL() { return GetTokens(SatukParser.BOOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL(int i) {
			return GetToken(SatukParser.BOOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public ClassAssContext(Assignment_classContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterClassAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitClassAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_classContext assignment_class() {
		Assignment_classContext _localctx = new Assignment_classContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignment_class);
		int _la;
		try {
			_localctx = new ClassAssContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(VARIABLE);
			State = 230;
			Match(VARIABLE);
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 231;
				Match(ASSIGN);
				State = 232;
				Match(T__7);
				State = 233;
				Match(VARIABLE);
				State = 234;
				Match(LPAREN);
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) {
					{
					{
					State = 235;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 240;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 236;
						Match(COMMA);
						State = 237;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						State = 242;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 248;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_functionContext execute_function() {
			return GetRuleContext<Execute_functionContext>(0);
		}
		public Assignment_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterAssignment_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitAssignment_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_functionContext assignment_function() {
		Assignment_functionContext _localctx = new Assignment_functionContext(Context, State);
		EnterRule(_localctx, 36, RULE_assignment_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 251;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 254;
			Match(VARIABLE);
			State = 255;
			Match(ASSIGN);
			State = 256;
			execute_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticsContext : ParserRuleContext {
		public ArithmeticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetics; } }
	 
		public ArithmeticsContext() { }
		public virtual void CopyFrom(ArithmeticsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberArithmContext : ArithmeticsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		public NumberArithmContext(ArithmeticsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterNumberArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitNumberArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberArithm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenArithmContext : ArithmeticsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		public ParenArithmContext(ArithmeticsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterParenArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitParenArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenArithm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpArithmContext : ArithmeticsContext {
		public ArithmeticsContext left;
		public IToken op;
		public ArithmeticsContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext[] arithmetics() {
			return GetRuleContexts<ArithmeticsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics(int i) {
			return GetRuleContext<ArithmeticsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(SatukParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(SatukParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(SatukParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(SatukParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(SatukParser.SUB, 0); }
		public OpArithmContext(ArithmeticsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterOpArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitOpArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpArithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticsContext arithmetics() {
		return arithmetics(0);
	}

	private ArithmeticsContext arithmetics(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticsContext _localctx = new ArithmeticsContext(Context, _parentState);
		ArithmeticsContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_arithmetics, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				_localctx = new ParenArithmContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 259;
				Match(LPAREN);
				State = 260;
				arithmetics(0);
				State = 261;
				Match(RPAREN);
				}
				break;
			case INT:
			case FLOAT:
			case VARIABLE:
				{
				_localctx = new NumberArithmContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 263;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 11540474045136896L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 274;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 272;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new OpArithmContext(new ArithmeticsContext(_parentctx, _parentState));
						((OpArithmContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetics);
						State = 266;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 267;
						((OpArithmContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7696581394432L) != 0)) ) {
							((OpArithmContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 268;
						((OpArithmContext)_localctx).right = arithmetics(5);
						}
						break;
					case 2:
						{
						_localctx = new OpArithmContext(new ArithmeticsContext(_parentctx, _parentState));
						((OpArithmContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetics);
						State = 269;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 270;
						((OpArithmContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((OpArithmContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 271;
						((OpArithmContext)_localctx).right = arithmetics(4);
						}
						break;
					}
					} 
				}
				State = 276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Arithmetics_intContext : ParserRuleContext {
		public Arithmetics_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetics_int; } }
	 
		public Arithmetics_intContext() { }
		public virtual void CopyFrom(Arithmetics_intContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OpArithmIntContext : Arithmetics_intContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SatukParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SatukParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(SatukParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(SatukParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUB() { return GetTokens(SatukParser.SUB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB(int i) {
			return GetToken(SatukParser.SUB, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(SatukParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(SatukParser.MUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(SatukParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(SatukParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(SatukParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(SatukParser.MOD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD_ASSIGN() { return GetTokens(SatukParser.ADD_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN(int i) {
			return GetToken(SatukParser.ADD_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUB_ASSIGN() { return GetTokens(SatukParser.SUB_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN(int i) {
			return GetToken(SatukParser.SUB_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL_ASSIGN() { return GetTokens(SatukParser.MUL_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_ASSIGN(int i) {
			return GetToken(SatukParser.MUL_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV_ASSIGN() { return GetTokens(SatukParser.DIV_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN(int i) {
			return GetToken(SatukParser.DIV_ASSIGN, i);
		}
		public OpArithmIntContext(Arithmetics_intContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterOpArithmInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitOpArithmInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpArithmInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetics_intContext arithmetics_int() {
		Arithmetics_intContext _localctx = new Arithmetics_intContext(Context, State);
		EnterRule(_localctx, 40, RULE_arithmetics_int);
		int _la;
		try {
			_localctx = new OpArithmIntContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==VARIABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 278;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 140462610448384L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 279;
				_la = TokenStream.LA(1);
				if ( !(_la==INT || _la==VARIABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 140462610448384L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetics_floatContext : ParserRuleContext {
		public Arithmetics_floatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetics_float; } }
	 
		public Arithmetics_floatContext() { }
		public virtual void CopyFrom(Arithmetics_floatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OpArithmFloatContext : Arithmetics_floatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(SatukParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(SatukParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(SatukParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(SatukParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUB() { return GetTokens(SatukParser.SUB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB(int i) {
			return GetToken(SatukParser.SUB, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(SatukParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(SatukParser.MUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(SatukParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(SatukParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(SatukParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(SatukParser.MOD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD_ASSIGN() { return GetTokens(SatukParser.ADD_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN(int i) {
			return GetToken(SatukParser.ADD_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUB_ASSIGN() { return GetTokens(SatukParser.SUB_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN(int i) {
			return GetToken(SatukParser.SUB_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL_ASSIGN() { return GetTokens(SatukParser.MUL_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_ASSIGN(int i) {
			return GetToken(SatukParser.MUL_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV_ASSIGN() { return GetTokens(SatukParser.DIV_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN(int i) {
			return GetToken(SatukParser.DIV_ASSIGN, i);
		}
		public OpArithmFloatContext(Arithmetics_floatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterOpArithmFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitOpArithmFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpArithmFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetics_floatContext arithmetics_float() {
		Arithmetics_floatContext _localctx = new Arithmetics_floatContext(Context, State);
		EnterRule(_localctx, 42, RULE_arithmetics_float);
		int _la;
		try {
			_localctx = new OpArithmFloatContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOAT || _la==VARIABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 285;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 140462610448384L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 286;
				_la = TokenStream.LA(1);
				if ( !(_la==FLOAT || _la==VARIABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 140462610448384L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_incContext int_inc() {
			return GetRuleContext<Int_incContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Float_incContext float_inc() {
			return GetRuleContext<Float_incContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_decContext int_dec() {
			return GetRuleContext<Int_decContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Float_decContext float_dec() {
			return GetRuleContext<Float_decContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_incContext variable_inc() {
			return GetRuleContext<Variable_incContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_decContext variable_dec() {
			return GetRuleContext<Variable_decContext>(0);
		}
		public MutatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterMutators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitMutators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MutatorsContext mutators() {
		MutatorsContext _localctx = new MutatorsContext(Context, State);
		EnterRule(_localctx, 44, RULE_mutators);
		try {
			State = 297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291;
				int_inc();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292;
				float_inc();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 293;
				int_dec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 294;
				float_dec();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 295;
				variable_inc();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 296;
				variable_dec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_incContext : ParserRuleContext {
		public Int_incContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_inc; } }
	 
		public Int_incContext() { }
		public virtual void CopyFrom(Int_incContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IncIntContext : Int_incContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(SatukParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public IncIntContext(Int_incContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterIncInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitIncInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_incContext int_inc() {
		Int_incContext _localctx = new Int_incContext(Context, State);
		EnterRule(_localctx, 46, RULE_int_inc);
		try {
			_localctx = new IncIntContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(INT);
			State = 300;
			Match(INC);
			State = 302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 301;
				Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Float_incContext : ParserRuleContext {
		public Float_incContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_inc; } }
	 
		public Float_incContext() { }
		public virtual void CopyFrom(Float_incContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IncFloatContext : Float_incContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(SatukParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public IncFloatContext(Float_incContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterIncFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitIncFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Float_incContext float_inc() {
		Float_incContext _localctx = new Float_incContext(Context, State);
		EnterRule(_localctx, 48, RULE_float_inc);
		try {
			_localctx = new IncFloatContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			Match(FLOAT);
			State = 305;
			Match(INC);
			State = 307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 306;
				Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_decContext : ParserRuleContext {
		public Int_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_dec; } }
	 
		public Int_decContext() { }
		public virtual void CopyFrom(Int_decContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DecIntContext : Int_decContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SatukParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public DecIntContext(Int_decContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterDecInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitDecInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_decContext int_dec() {
		Int_decContext _localctx = new Int_decContext(Context, State);
		EnterRule(_localctx, 50, RULE_int_dec);
		try {
			_localctx = new DecIntContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(INT);
			State = 310;
			Match(DEC);
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 311;
				Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Float_decContext : ParserRuleContext {
		public Float_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_dec; } }
	 
		public Float_decContext() { }
		public virtual void CopyFrom(Float_decContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DecFloatContext : Float_decContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SatukParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public DecFloatContext(Float_decContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterDecFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitDecFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Float_decContext float_dec() {
		Float_decContext _localctx = new Float_decContext(Context, State);
		EnterRule(_localctx, 52, RULE_float_dec);
		try {
			_localctx = new DecFloatContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(FLOAT);
			State = 315;
			Match(DEC);
			State = 317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 316;
				Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_incContext : ParserRuleContext {
		public Variable_incContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_inc; } }
	 
		public Variable_incContext() { }
		public virtual void CopyFrom(Variable_incContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IncVarContext : Variable_incContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(SatukParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public IncVarContext(Variable_incContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterIncVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitIncVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_incContext variable_inc() {
		Variable_incContext _localctx = new Variable_incContext(Context, State);
		EnterRule(_localctx, 54, RULE_variable_inc);
		int _la;
		try {
			_localctx = new IncVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(VARIABLE);
			State = 320;
			Match(INC);
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 321;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_decContext : ParserRuleContext {
		public Variable_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_dec; } }
	 
		public Variable_decContext() { }
		public virtual void CopyFrom(Variable_decContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DecVarContext : Variable_decContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SatukParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public DecVarContext(Variable_decContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterDecVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitDecVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_decContext variable_dec() {
		Variable_decContext _localctx = new Variable_decContext(Context, State);
		EnterRule(_localctx, 56, RULE_variable_dec);
		int _la;
		try {
			_localctx = new DecVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(VARIABLE);
			State = 325;
			Match(DEC);
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 326;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_instructionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_boolContext logical_bool() {
			return GetRuleContext<Logical_boolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_numericContext logical_numeric() {
			return GetRuleContext<Logical_numericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_textContext logical_text() {
			return GetRuleContext<Logical_textContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_varContext logical_var() {
			return GetRuleContext<Logical_varContext>(0);
		}
		public Logical_instructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_instructions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterLogical_instructions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitLogical_instructions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_instructions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_instructionsContext logical_instructions() {
		Logical_instructionsContext _localctx = new Logical_instructionsContext(Context, State);
		EnterRule(_localctx, 58, RULE_logical_instructions);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329;
				logical_bool();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330;
				logical_numeric();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 331;
				logical_text();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 332;
				logical_var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_boolContext : ParserRuleContext {
		public Logical_boolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_bool; } }
	 
		public Logical_boolContext() { }
		public virtual void CopyFrom(Logical_boolContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogBoolContext : Logical_boolContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOOL() { return GetTokens(SatukParser.BOOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL(int i) {
			return GetToken(SatukParser.BOOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SatukParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext[] logical_instructions() {
			return GetRuleContexts<Logical_instructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions(int i) {
			return GetRuleContext<Logical_instructionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(SatukParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SatukParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(SatukParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(SatukParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(SatukParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(SatukParser.AND, i);
		}
		public LogBoolContext(Logical_boolContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterLogBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitLogBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_boolContext logical_bool() {
		Logical_boolContext _localctx = new Logical_boolContext(Context, State);
		EnterRule(_localctx, 60, RULE_logical_bool);
		int _la;
		try {
			int _alt;
			_localctx = new LogBoolContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 335;
				Match(NOT);
				}
			}

			State = 338;
			Match(BOOL);
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL || _la==NOTEQUAL) {
				{
				State = 339;
				_la = TokenStream.LA(1);
				if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 340;
				Match(BOOL);
				}
			}

			State = 347;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 343;
					_la = TokenStream.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 344;
					logical_instructions();
					}
					} 
				}
				State = 349;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_numericContext : ParserRuleContext {
		public Logical_numericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_numeric; } }
	 
		public Logical_numericContext() { }
		public virtual void CopyFrom(Logical_numericContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogNumContext : Logical_numericContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(SatukParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(SatukParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SatukParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SatukParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(SatukParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(SatukParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SatukParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SatukParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SatukParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(SatukParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext[] logical_instructions() {
			return GetRuleContexts<Logical_instructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions(int i) {
			return GetRuleContext<Logical_instructionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(SatukParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(SatukParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(SatukParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(SatukParser.AND, i);
		}
		public LogNumContext(Logical_numericContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterLogNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitLogNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_numericContext logical_numeric() {
		Logical_numericContext _localctx = new Logical_numericContext(Context, State);
		EnterRule(_localctx, 62, RULE_logical_numeric);
		int _la;
		try {
			int _alt;
			_localctx = new LogNumContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 11540474045136896L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 351;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16307453952L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 352;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 11540474045136896L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 357;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 353;
					_la = TokenStream.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 354;
					logical_instructions();
					}
					} 
				}
				State = 359;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_textContext : ParserRuleContext {
		public Logical_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_text; } }
	 
		public Logical_textContext() { }
		public virtual void CopyFrom(Logical_textContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogTextContext : Logical_textContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(SatukParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(SatukParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR() { return GetTokens(SatukParser.CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR(int i) {
			return GetToken(SatukParser.CHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SatukParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(SatukParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext[] logical_instructions() {
			return GetRuleContexts<Logical_instructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions(int i) {
			return GetRuleContext<Logical_instructionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(SatukParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(SatukParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(SatukParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(SatukParser.AND, i);
		}
		public LogTextContext(Logical_textContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterLogText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitLogText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_textContext logical_text() {
		Logical_textContext _localctx = new Logical_textContext(Context, State);
		EnterRule(_localctx, 64, RULE_logical_text);
		int _la;
		try {
			int _alt;
			_localctx = new LogTextContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==CHAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 361;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 362;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==CHAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 367;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 363;
					_la = TokenStream.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 364;
					logical_instructions();
					}
					} 
				}
				State = 369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_varContext : ParserRuleContext {
		public Logical_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_var; } }
	 
		public Logical_varContext() { }
		public virtual void CopyFrom(Logical_varContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogVarContext : Logical_varContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SatukParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext[] logical_instructions() {
			return GetRuleContexts<Logical_instructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions(int i) {
			return GetRuleContext<Logical_instructionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(SatukParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(SatukParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SatukParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SatukParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SatukParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(SatukParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(SatukParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(SatukParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(SatukParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(SatukParser.AND, i);
		}
		public LogVarContext(Logical_varContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterLogVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitLogVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_varContext logical_var() {
		Logical_varContext _localctx = new Logical_varContext(Context, State);
		EnterRule(_localctx, 66, RULE_logical_var);
		int _la;
		try {
			int _alt;
			_localctx = new LogVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 370;
				Match(NOT);
				}
			}

			State = 373;
			Match(VARIABLE);
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16307453952L) != 0)) {
				{
				State = 374;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16307453952L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 375;
				Match(VARIABLE);
				}
			}

			State = 382;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 378;
					_la = TokenStream.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 379;
					logical_instructions();
					}
					} 
				}
				State = 384;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(SatukParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(SatukParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext[] logical_instructions() {
			return GetRuleContexts<Logical_instructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions(int i) {
			return GetRuleContext<Logical_instructionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(SatukParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(SatukParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACE() { return GetTokens(SatukParser.LBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE(int i) {
			return GetToken(SatukParser.LBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext[] prog() {
			return GetRuleContexts<ProgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog(int i) {
			return GetRuleContext<ProgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACE() { return GetTokens(SatukParser.RBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE(int i) {
			return GetToken(SatukParser.RBRACE, i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 68, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(T__8);
			State = 386;
			Match(LPAREN);
			State = 387;
			logical_instructions();
			State = 388;
			Match(RPAREN);
			State = 389;
			Match(LBRACE);
			State = 390;
			prog();
			State = 391;
			Match(RBRACE);
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 392;
				Match(T__9);
				State = 393;
				Match(LPAREN);
				State = 394;
				logical_instructions();
				State = 395;
				Match(RPAREN);
				State = 396;
				Match(LBRACE);
				State = 397;
				prog();
				State = 398;
				Match(RBRACE);
				}
				}
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 405;
				Match(T__10);
				State = 406;
				Match(LBRACE);
				State = 407;
				prog();
				State = 408;
				Match(RBRACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 70, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(T__11);
			State = 413;
			Match(LPAREN);
			State = 414;
			logical_instructions();
			State = 415;
			Match(RPAREN);
			State = 416;
			Match(LBRACE);
			State = 417;
			prog();
			State = 418;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_contentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SatukParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(SatukParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SatukParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		public Print_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_content(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_content(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_content(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_contentContext print_content() {
		Print_contentContext _localctx = new Print_contentContext(Context, State);
		EnterRule(_localctx, 72, RULE_print_content);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 420;
				Match(STRING);
				}
				break;
			case 2:
				{
				State = 421;
				Match(VARIABLE);
				}
				break;
			case 3:
				{
				State = 422;
				Match(CHAR);
				}
				break;
			case 4:
				{
				State = 423;
				Match(INT);
				}
				break;
			case 5:
				{
				State = 424;
				Match(FLOAT);
				}
				break;
			case 6:
				{
				State = 425;
				Match(BOOL);
				}
				break;
			case 7:
				{
				State = 426;
				arithmetics(0);
				}
				break;
			case 8:
				{
				State = 427;
				logical_instructions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public FunctionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsContext functions() {
		FunctionsContext _localctx = new FunctionsContext(Context, State);
		EnterRule(_localctx, 74, RULE_functions);
		try {
			State = 432;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 430;
				function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431;
				constructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Void_functionContext void_function() {
			return GetRuleContext<Void_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_functionContext int_function() {
			return GetRuleContext<Int_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Float_functionContext float_function() {
			return GetRuleContext<Float_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_functionContext string_function() {
			return GetRuleContext<String_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_functionContext char_function() {
			return GetRuleContext<Char_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_functionContext bool_function() {
			return GetRuleContext<Bool_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_functionContext variable_function() {
			return GetRuleContext<Variable_functionContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 76, RULE_function);
		try {
			State = 441;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434;
				void_function();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				int_function();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 436;
				float_function();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 437;
				string_function();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 5);
				{
				State = 438;
				char_function();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 6);
				{
				State = 439;
				bool_function();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 440;
				variable_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
	 
		public ConstructorContext() { }
		public virtual void CopyFrom(ConstructorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructContext : ConstructorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public ConstructContext(ConstructorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 78, RULE_constructor);
		int _la;
		try {
			_localctx = new ConstructContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(VARIABLE);
			State = 444;
			Match(LPAREN);
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 445;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 446;
				Match(VARIABLE);
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 447;
					Match(COMMA);
					State = 448;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 449;
					Match(VARIABLE);
					}
					}
					State = 454;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 460;
			Match(RPAREN);
			State = 461;
			Match(LBRACE);
			State = 462;
			prog();
			State = 463;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Void_returnContext void_return() {
			return GetRuleContext<Void_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_returnContext int_return() {
			return GetRuleContext<Int_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Float_returnContext float_return() {
			return GetRuleContext<Float_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_returnContext string_return() {
			return GetRuleContext<String_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_returnContext char_return() {
			return GetRuleContext<Char_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_returnContext bool_return() {
			return GetRuleContext<Bool_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_returnContext variable_return() {
			return GetRuleContext<Variable_returnContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 80, RULE_return);
		try {
			State = 472;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 465;
				void_return();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 466;
				int_return();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 467;
				float_return();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 468;
				string_return();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 469;
				char_return();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 470;
				bool_return();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 471;
				variable_return();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext[] functions() {
			return GetRuleContexts<FunctionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext functions(int i) {
			return GetRuleContext<FunctionsContext>(i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 82, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			Match(T__12);
			State = 475;
			Match(VARIABLE);
			State = 476;
			Match(LBRACE);
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254757624L) != 0)) {
				{
				State = 479;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 477;
					assignment();
					}
					break;
				case 2:
					{
					State = 478;
					functions();
					}
					break;
				}
				}
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 484;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SatukParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SatukParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(SatukParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(SatukParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SatukParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SatukParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(SatukParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(SatukParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR() { return GetTokens(SatukParser.CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR(int i) {
			return GetToken(SatukParser.CHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOOL() { return GetTokens(SatukParser.BOOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL(int i) {
			return GetToken(SatukParser.BOOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public Execute_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterExecute_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitExecute_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_functionContext execute_function() {
		Execute_functionContext _localctx = new Execute_functionContext(Context, State);
		EnterRule(_localctx, 84, RULE_execute_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 486;
					Match(VARIABLE);
					State = 487;
					Match(DOT);
					}
					} 
				}
				State = 492;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			State = 493;
			Match(VARIABLE);
			State = 494;
			Match(LPAREN);
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) {
				{
				{
				State = 495;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 496;
					Match(COMMA);
					State = 497;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 502;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 508;
			Match(RPAREN);
			State = 509;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Void_functionContext : ParserRuleContext {
		public Void_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_void_function; } }
	 
		public Void_functionContext() { }
		public virtual void CopyFrom(Void_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncVoidContext : Void_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Void_returnContext void_return() {
			return GetRuleContext<Void_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncVoidContext(Void_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncVoid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Void_functionContext void_function() {
		Void_functionContext _localctx = new Void_functionContext(Context, State);
		EnterRule(_localctx, 86, RULE_void_function);
		int _la;
		try {
			_localctx = new FuncVoidContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(T__13);
			State = 512;
			Match(VARIABLE);
			State = 513;
			Match(LPAREN);
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 514;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 515;
				Match(VARIABLE);
				State = 521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 516;
					Match(COMMA);
					State = 517;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 518;
					Match(VARIABLE);
					}
					}
					State = 523;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 529;
			Match(RPAREN);
			State = 530;
			Match(LBRACE);
			State = 531;
			prog();
			State = 532;
			void_return();
			State = 533;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_functionContext : ParserRuleContext {
		public Int_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_function; } }
	 
		public Int_functionContext() { }
		public virtual void CopyFrom(Int_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncIntContext : Int_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_returnContext int_return() {
			return GetRuleContext<Int_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncIntContext(Int_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_functionContext int_function() {
		Int_functionContext _localctx = new Int_functionContext(Context, State);
		EnterRule(_localctx, 88, RULE_int_function);
		int _la;
		try {
			_localctx = new FuncIntContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(T__5);
			State = 536;
			Match(VARIABLE);
			State = 537;
			Match(LPAREN);
			State = 550;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 538;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 539;
				Match(VARIABLE);
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 540;
					Match(COMMA);
					State = 541;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 542;
					Match(VARIABLE);
					}
					}
					State = 547;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 553;
			Match(RPAREN);
			State = 554;
			Match(LBRACE);
			State = 555;
			prog();
			State = 556;
			int_return();
			State = 557;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Float_functionContext : ParserRuleContext {
		public Float_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_function; } }
	 
		public Float_functionContext() { }
		public virtual void CopyFrom(Float_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncFloatContext : Float_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Float_returnContext float_return() {
			return GetRuleContext<Float_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncFloatContext(Float_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Float_functionContext float_function() {
		Float_functionContext _localctx = new Float_functionContext(Context, State);
		EnterRule(_localctx, 90, RULE_float_function);
		int _la;
		try {
			_localctx = new FuncFloatContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(T__6);
			State = 560;
			Match(VARIABLE);
			State = 561;
			Match(LPAREN);
			State = 574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 562;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 563;
				Match(VARIABLE);
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 564;
					Match(COMMA);
					State = 565;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 566;
					Match(VARIABLE);
					}
					}
					State = 571;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 577;
			Match(RPAREN);
			State = 578;
			Match(LBRACE);
			State = 579;
			prog();
			State = 580;
			float_return();
			State = 581;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_functionContext : ParserRuleContext {
		public String_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_function; } }
	 
		public String_functionContext() { }
		public virtual void CopyFrom(String_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncStringContext : String_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_returnContext string_return() {
			return GetRuleContext<String_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncStringContext(String_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_functionContext string_function() {
		String_functionContext _localctx = new String_functionContext(Context, State);
		EnterRule(_localctx, 92, RULE_string_function);
		int _la;
		try {
			_localctx = new FuncStringContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			Match(T__3);
			State = 584;
			Match(VARIABLE);
			State = 585;
			Match(LPAREN);
			State = 598;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 586;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 587;
				Match(VARIABLE);
				State = 593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 588;
					Match(COMMA);
					State = 589;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 590;
					Match(VARIABLE);
					}
					}
					State = 595;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 600;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 601;
			Match(RPAREN);
			State = 602;
			Match(LBRACE);
			State = 603;
			prog();
			State = 604;
			string_return();
			State = 605;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_functionContext : ParserRuleContext {
		public Char_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_function; } }
	 
		public Char_functionContext() { }
		public virtual void CopyFrom(Char_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncCharContext : Char_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_returnContext char_return() {
			return GetRuleContext<Char_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncCharContext(Char_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Char_functionContext char_function() {
		Char_functionContext _localctx = new Char_functionContext(Context, State);
		EnterRule(_localctx, 94, RULE_char_function);
		int _la;
		try {
			_localctx = new FuncCharContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			Match(T__4);
			State = 608;
			Match(VARIABLE);
			State = 609;
			Match(LPAREN);
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 610;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 611;
				Match(VARIABLE);
				State = 617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 612;
					Match(COMMA);
					State = 613;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 614;
					Match(VARIABLE);
					}
					}
					State = 619;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 625;
			Match(RPAREN);
			State = 626;
			Match(LBRACE);
			State = 627;
			prog();
			State = 628;
			char_return();
			State = 629;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_functionContext : ParserRuleContext {
		public Bool_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_function; } }
	 
		public Bool_functionContext() { }
		public virtual void CopyFrom(Bool_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncBoolContext : Bool_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_returnContext bool_return() {
			return GetRuleContext<Bool_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncBoolContext(Bool_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_functionContext bool_function() {
		Bool_functionContext _localctx = new Bool_functionContext(Context, State);
		EnterRule(_localctx, 96, RULE_bool_function);
		int _la;
		try {
			_localctx = new FuncBoolContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			Match(T__2);
			State = 632;
			Match(VARIABLE);
			State = 633;
			Match(LPAREN);
			State = 646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 634;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 635;
				Match(VARIABLE);
				State = 641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 636;
					Match(COMMA);
					State = 637;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 638;
					Match(VARIABLE);
					}
					}
					State = 643;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 648;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 649;
			Match(RPAREN);
			State = 650;
			Match(LBRACE);
			State = 651;
			prog();
			State = 652;
			bool_return();
			State = 653;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_functionContext : ParserRuleContext {
		public Variable_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_function; } }
	 
		public Variable_functionContext() { }
		public virtual void CopyFrom(Variable_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncVarContext : Variable_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_returnContext variable_return() {
			return GetRuleContext<Variable_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncVarContext(Variable_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_functionContext variable_function() {
		Variable_functionContext _localctx = new Variable_functionContext(Context, State);
		EnterRule(_localctx, 98, RULE_variable_function);
		int _la;
		try {
			_localctx = new FuncVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			Match(VARIABLE);
			State = 656;
			Match(VARIABLE);
			State = 657;
			Match(LPAREN);
			State = 670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 658;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 659;
				Match(VARIABLE);
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 660;
					Match(COMMA);
					State = 661;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 662;
					Match(VARIABLE);
					}
					}
					State = 667;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 673;
			Match(RPAREN);
			State = 674;
			Match(LBRACE);
			State = 675;
			prog();
			State = 676;
			variable_return();
			State = 677;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Void_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public Void_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_void_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterVoid_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitVoid_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoid_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Void_returnContext void_return() {
		Void_returnContext _localctx = new Void_returnContext(Context, State);
		EnterRule(_localctx, 100, RULE_void_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			Match(T__14);
			State = 680;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_returnContext : ParserRuleContext {
		public Int_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_return; } }
	 
		public Int_returnContext() { }
		public virtual void CopyFrom(Int_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetIntContext : Int_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetics_intContext arithmetics_int() {
			return GetRuleContext<Arithmetics_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_incContext int_inc() {
			return GetRuleContext<Int_incContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_decContext int_dec() {
			return GetRuleContext<Int_decContext>(0);
		}
		public RetIntContext(Int_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_returnContext int_return() {
		Int_returnContext _localctx = new Int_returnContext(Context, State);
		EnterRule(_localctx, 102, RULE_int_return);
		try {
			_localctx = new RetIntContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			Match(T__14);
			State = 688;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 683;
				Match(INT);
				}
				break;
			case 2:
				{
				State = 684;
				Match(VARIABLE);
				}
				break;
			case 3:
				{
				State = 685;
				arithmetics_int();
				}
				break;
			case 4:
				{
				State = 686;
				int_inc();
				}
				break;
			case 5:
				{
				State = 687;
				int_dec();
				}
				break;
			}
			State = 690;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Float_returnContext : ParserRuleContext {
		public Float_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_return; } }
	 
		public Float_returnContext() { }
		public virtual void CopyFrom(Float_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetFloatContext : Float_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetics_floatContext arithmetics_float() {
			return GetRuleContext<Arithmetics_floatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Float_incContext float_inc() {
			return GetRuleContext<Float_incContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Float_decContext float_dec() {
			return GetRuleContext<Float_decContext>(0);
		}
		public RetFloatContext(Float_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Float_returnContext float_return() {
		Float_returnContext _localctx = new Float_returnContext(Context, State);
		EnterRule(_localctx, 104, RULE_float_return);
		try {
			_localctx = new RetFloatContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			Match(T__14);
			State = 698;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 693;
				Match(FLOAT);
				}
				break;
			case 2:
				{
				State = 694;
				Match(VARIABLE);
				}
				break;
			case 3:
				{
				State = 695;
				arithmetics_float();
				}
				break;
			case 4:
				{
				State = 696;
				float_inc();
				}
				break;
			case 5:
				{
				State = 697;
				float_dec();
				}
				break;
			}
			State = 700;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_returnContext : ParserRuleContext {
		public String_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_return; } }
	 
		public String_returnContext() { }
		public virtual void CopyFrom(String_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetStringContext : String_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SatukParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		public RetStringContext(String_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_returnContext string_return() {
		String_returnContext _localctx = new String_returnContext(Context, State);
		EnterRule(_localctx, 106, RULE_string_return);
		int _la;
		try {
			_localctx = new RetStringContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			Match(T__14);
			State = 703;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==VARIABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 704;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_returnContext : ParserRuleContext {
		public Char_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_return; } }
	 
		public Char_returnContext() { }
		public virtual void CopyFrom(Char_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetCharContext : Char_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(SatukParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		public RetCharContext(Char_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Char_returnContext char_return() {
		Char_returnContext _localctx = new Char_returnContext(Context, State);
		EnterRule(_localctx, 108, RULE_char_return);
		int _la;
		try {
			_localctx = new RetCharContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			Match(T__14);
			State = 707;
			_la = TokenStream.LA(1);
			if ( !(_la==CHAR || _la==VARIABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 708;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_returnContext : ParserRuleContext {
		public Bool_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_return; } }
	 
		public Bool_returnContext() { }
		public virtual void CopyFrom(Bool_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetBoolContext : Bool_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SatukParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		public RetBoolContext(Bool_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_returnContext bool_return() {
		Bool_returnContext _localctx = new Bool_returnContext(Context, State);
		EnterRule(_localctx, 110, RULE_bool_return);
		try {
			_localctx = new RetBoolContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 710;
			Match(T__14);
			State = 714;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 711;
				Match(BOOL);
				}
				break;
			case 2:
				{
				State = 712;
				Match(VARIABLE);
				}
				break;
			case 3:
				{
				State = 713;
				logical_instructions();
				}
				break;
			}
			State = 716;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_returnContext : ParserRuleContext {
		public Variable_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_return; } }
	 
		public Variable_returnContext() { }
		public virtual void CopyFrom(Variable_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetVarContext : Variable_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public RetVarContext(Variable_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_returnContext variable_return() {
		Variable_returnContext _localctx = new Variable_returnContext(Context, State);
		EnterRule(_localctx, 112, RULE_variable_return);
		try {
			_localctx = new RetVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			Match(T__14);
			State = 719;
			Match(VARIABLE);
			State = 720;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return arithmetics_sempred((ArithmeticsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmetics_sempred(ArithmeticsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,53,723,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		1,0,5,0,116,8,0,10,0,12,0,119,9,0,1,0,5,0,122,8,0,10,0,12,0,125,9,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,5,1,138,8,1,10,1,12,1,141,9,
		1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,3,3,164,8,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,172,8,4,1,5,1,
		5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,3,7,186,8,7,1,8,1,8,1,8,1,8,
		1,9,1,9,1,9,1,9,3,9,196,8,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,3,
		11,206,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
		3,14,220,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,5,17,239,8,17,10,17,12,17,242,9,17,5,17,244,
		8,17,10,17,12,17,247,9,17,1,17,3,17,250,8,17,1,18,3,18,253,8,18,1,18,1,
		18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,265,8,19,1,19,1,19,1,19,
		1,19,1,19,1,19,5,19,273,8,19,10,19,12,19,276,9,19,1,20,1,20,1,20,4,20,
		281,8,20,11,20,12,20,282,1,21,1,21,1,21,4,21,288,8,21,11,21,12,21,289,
		1,22,1,22,1,22,1,22,1,22,1,22,3,22,298,8,22,1,23,1,23,1,23,3,23,303,8,
		23,1,24,1,24,1,24,3,24,308,8,24,1,25,1,25,1,25,3,25,313,8,25,1,26,1,26,
		1,26,3,26,318,8,26,1,27,1,27,1,27,3,27,323,8,27,1,28,1,28,1,28,3,28,328,
		8,28,1,29,1,29,1,29,1,29,3,29,334,8,29,1,30,3,30,337,8,30,1,30,1,30,1,
		30,3,30,342,8,30,1,30,1,30,5,30,346,8,30,10,30,12,30,349,9,30,1,31,1,31,
		1,31,1,31,1,31,5,31,356,8,31,10,31,12,31,359,9,31,1,32,1,32,1,32,1,32,
		1,32,5,32,366,8,32,10,32,12,32,369,9,32,1,33,3,33,372,8,33,1,33,1,33,1,
		33,3,33,377,8,33,1,33,1,33,5,33,381,8,33,10,33,12,33,384,9,33,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,
		401,8,34,10,34,12,34,404,9,34,1,34,1,34,1,34,1,34,1,34,3,34,411,8,34,1,
		35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,
		36,1,36,3,36,429,8,36,1,37,1,37,3,37,433,8,37,1,38,1,38,1,38,1,38,1,38,
		1,38,1,38,3,38,442,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,451,8,
		39,10,39,12,39,454,9,39,5,39,456,8,39,10,39,12,39,459,9,39,1,39,1,39,1,
		39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,473,8,40,1,41,1,41,
		1,41,1,41,1,41,5,41,480,8,41,10,41,12,41,483,9,41,1,41,1,41,1,42,1,42,
		5,42,489,8,42,10,42,12,42,492,9,42,1,42,1,42,1,42,1,42,1,42,5,42,499,8,
		42,10,42,12,42,502,9,42,5,42,504,8,42,10,42,12,42,507,9,42,1,42,1,42,1,
		42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,520,8,43,10,43,12,43,523,
		9,43,5,43,525,8,43,10,43,12,43,528,9,43,1,43,1,43,1,43,1,43,1,43,1,43,
		1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,544,8,44,10,44,12,44,547,
		9,44,5,44,549,8,44,10,44,12,44,552,9,44,1,44,1,44,1,44,1,44,1,44,1,44,
		1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,5,45,568,8,45,10,45,12,45,571,
		9,45,5,45,573,8,45,10,45,12,45,576,9,45,1,45,1,45,1,45,1,45,1,45,1,45,
		1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,5,46,592,8,46,10,46,12,46,595,
		9,46,5,46,597,8,46,10,46,12,46,600,9,46,1,46,1,46,1,46,1,46,1,46,1,46,
		1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,5,47,616,8,47,10,47,12,47,619,
		9,47,5,47,621,8,47,10,47,12,47,624,9,47,1,47,1,47,1,47,1,47,1,47,1,47,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,640,8,48,10,48,12,48,643,
		9,48,5,48,645,8,48,10,48,12,48,648,9,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,664,8,49,10,49,12,49,667,
		9,49,5,49,669,8,49,10,49,12,49,672,9,49,1,49,1,49,1,49,1,49,1,49,1,49,
		1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,689,8,51,1,51,1,51,1,
		52,1,52,1,52,1,52,1,52,1,52,3,52,699,8,52,1,52,1,52,1,53,1,53,1,53,1,53,
		1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,3,55,715,8,55,1,55,1,55,1,56,1,
		56,1,56,1,56,1,56,0,1,38,57,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
		80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,0,14,1,0,48,
		53,2,0,3,7,53,53,3,0,48,48,51,51,53,53,1,0,40,42,1,0,38,39,2,0,48,48,53,
		53,1,0,38,46,2,0,51,51,53,53,2,0,30,30,33,33,1,0,34,35,2,0,26,27,30,33,
		2,0,49,49,52,52,2,0,49,49,53,53,1,0,52,53,775,0,117,1,0,0,0,2,139,1,0,
		0,0,4,142,1,0,0,0,6,163,1,0,0,0,8,167,1,0,0,0,10,173,1,0,0,0,12,177,1,
		0,0,0,14,181,1,0,0,0,16,187,1,0,0,0,18,191,1,0,0,0,20,197,1,0,0,0,22,201,
		1,0,0,0,24,207,1,0,0,0,26,211,1,0,0,0,28,215,1,0,0,0,30,221,1,0,0,0,32,
		225,1,0,0,0,34,229,1,0,0,0,36,252,1,0,0,0,38,264,1,0,0,0,40,277,1,0,0,
		0,42,284,1,0,0,0,44,297,1,0,0,0,46,299,1,0,0,0,48,304,1,0,0,0,50,309,1,
		0,0,0,52,314,1,0,0,0,54,319,1,0,0,0,56,324,1,0,0,0,58,333,1,0,0,0,60,336,
		1,0,0,0,62,350,1,0,0,0,64,360,1,0,0,0,66,371,1,0,0,0,68,385,1,0,0,0,70,
		412,1,0,0,0,72,428,1,0,0,0,74,432,1,0,0,0,76,441,1,0,0,0,78,443,1,0,0,
		0,80,472,1,0,0,0,82,474,1,0,0,0,84,490,1,0,0,0,86,511,1,0,0,0,88,535,1,
		0,0,0,90,559,1,0,0,0,92,583,1,0,0,0,94,607,1,0,0,0,96,631,1,0,0,0,98,655,
		1,0,0,0,100,679,1,0,0,0,102,682,1,0,0,0,104,692,1,0,0,0,106,702,1,0,0,
		0,108,706,1,0,0,0,110,710,1,0,0,0,112,718,1,0,0,0,114,116,3,82,41,0,115,
		114,1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,123,1,
		0,0,0,119,117,1,0,0,0,120,122,3,74,37,0,121,120,1,0,0,0,122,125,1,0,0,
		0,123,121,1,0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,
		127,5,1,0,0,127,128,5,18,0,0,128,129,3,2,1,0,129,130,3,80,40,0,130,131,
		5,19,0,0,131,1,1,0,0,0,132,138,3,6,3,0,133,138,3,68,34,0,134,138,3,70,
		35,0,135,138,3,4,2,0,136,138,3,84,42,0,137,132,1,0,0,0,137,133,1,0,0,0,
		137,134,1,0,0,0,137,135,1,0,0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,
		1,0,0,0,139,140,1,0,0,0,140,3,1,0,0,0,141,139,1,0,0,0,142,143,5,2,0,0,
		143,144,5,16,0,0,144,145,3,72,36,0,145,146,5,17,0,0,146,147,5,22,0,0,147,
		5,1,0,0,0,148,164,3,18,9,0,149,164,3,14,7,0,150,164,3,28,14,0,151,164,
		3,8,4,0,152,164,3,24,12,0,153,164,3,22,11,0,154,164,3,32,16,0,155,164,
		3,10,5,0,156,164,3,34,17,0,157,164,3,12,6,0,158,164,3,20,10,0,159,164,
		3,30,15,0,160,164,3,26,13,0,161,164,3,16,8,0,162,164,3,36,18,0,163,148,
		1,0,0,0,163,149,1,0,0,0,163,150,1,0,0,0,163,151,1,0,0,0,163,152,1,0,0,
		0,163,153,1,0,0,0,163,154,1,0,0,0,163,155,1,0,0,0,163,156,1,0,0,0,163,
		157,1,0,0,0,163,158,1,0,0,0,163,159,1,0,0,0,163,160,1,0,0,0,163,161,1,
		0,0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,166,5,22,0,0,166,7,1,0,0,0,167,
		168,5,3,0,0,168,171,5,53,0,0,169,170,5,25,0,0,170,172,5,50,0,0,171,169,
		1,0,0,0,171,172,1,0,0,0,172,9,1,0,0,0,173,174,5,53,0,0,174,175,5,25,0,
		0,175,176,3,58,29,0,176,11,1,0,0,0,177,178,5,53,0,0,178,179,5,25,0,0,179,
		180,5,50,0,0,180,13,1,0,0,0,181,182,5,4,0,0,182,185,5,53,0,0,183,184,5,
		25,0,0,184,186,5,49,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,15,1,0,0,0,
		187,188,5,53,0,0,188,189,5,25,0,0,189,190,5,49,0,0,190,17,1,0,0,0,191,
		192,5,5,0,0,192,195,5,53,0,0,193,194,5,25,0,0,194,196,5,52,0,0,195,193,
		1,0,0,0,195,196,1,0,0,0,196,19,1,0,0,0,197,198,5,53,0,0,198,199,5,25,0,
		0,199,200,5,52,0,0,200,21,1,0,0,0,201,202,5,6,0,0,202,205,5,53,0,0,203,
		204,5,25,0,0,204,206,5,48,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,23,1,
		0,0,0,207,208,5,53,0,0,208,209,5,25,0,0,209,210,3,40,20,0,210,25,1,0,0,
		0,211,212,5,53,0,0,212,213,5,25,0,0,213,214,5,48,0,0,214,27,1,0,0,0,215,
		216,5,7,0,0,216,219,5,53,0,0,217,218,5,25,0,0,218,220,5,51,0,0,219,217,
		1,0,0,0,219,220,1,0,0,0,220,29,1,0,0,0,221,222,5,53,0,0,222,223,5,25,0,
		0,223,224,5,51,0,0,224,31,1,0,0,0,225,226,5,53,0,0,226,227,5,25,0,0,227,
		228,3,42,21,0,228,33,1,0,0,0,229,230,5,53,0,0,230,249,5,53,0,0,231,232,
		5,25,0,0,232,233,5,8,0,0,233,234,5,53,0,0,234,245,5,16,0,0,235,240,7,0,
		0,0,236,237,5,23,0,0,237,239,7,0,0,0,238,236,1,0,0,0,239,242,1,0,0,0,240,
		238,1,0,0,0,240,241,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,243,235,1,
		0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,
		247,245,1,0,0,0,248,250,5,17,0,0,249,231,1,0,0,0,249,250,1,0,0,0,250,35,
		1,0,0,0,251,253,7,1,0,0,252,251,1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,
		0,254,255,5,53,0,0,255,256,5,25,0,0,256,257,3,84,42,0,257,37,1,0,0,0,258,
		259,6,19,-1,0,259,260,5,16,0,0,260,261,3,38,19,0,261,262,5,17,0,0,262,
		265,1,0,0,0,263,265,7,2,0,0,264,258,1,0,0,0,264,263,1,0,0,0,265,274,1,
		0,0,0,266,267,10,4,0,0,267,268,7,3,0,0,268,273,3,38,19,5,269,270,10,3,
		0,0,270,271,7,4,0,0,271,273,3,38,19,4,272,266,1,0,0,0,272,269,1,0,0,0,
		273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,39,1,0,0,0,276,274,
		1,0,0,0,277,280,7,5,0,0,278,279,7,6,0,0,279,281,7,5,0,0,280,278,1,0,0,
		0,281,282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,41,1,0,0,0,284,287,
		7,7,0,0,285,286,7,6,0,0,286,288,7,7,0,0,287,285,1,0,0,0,288,289,1,0,0,
		0,289,287,1,0,0,0,289,290,1,0,0,0,290,43,1,0,0,0,291,298,3,46,23,0,292,
		298,3,48,24,0,293,298,3,50,25,0,294,298,3,52,26,0,295,298,3,54,27,0,296,
		298,3,56,28,0,297,291,1,0,0,0,297,292,1,0,0,0,297,293,1,0,0,0,297,294,
		1,0,0,0,297,295,1,0,0,0,297,296,1,0,0,0,298,45,1,0,0,0,299,300,5,48,0,
		0,300,302,5,36,0,0,301,303,5,22,0,0,302,301,1,0,0,0,302,303,1,0,0,0,303,
		47,1,0,0,0,304,305,5,51,0,0,305,307,5,36,0,0,306,308,5,22,0,0,307,306,
		1,0,0,0,307,308,1,0,0,0,308,49,1,0,0,0,309,310,5,48,0,0,310,312,5,37,0,
		0,311,313,5,22,0,0,312,311,1,0,0,0,312,313,1,0,0,0,313,51,1,0,0,0,314,
		315,5,51,0,0,315,317,5,37,0,0,316,318,5,22,0,0,317,316,1,0,0,0,317,318,
		1,0,0,0,318,53,1,0,0,0,319,320,5,53,0,0,320,322,5,36,0,0,321,323,5,22,
		0,0,322,321,1,0,0,0,322,323,1,0,0,0,323,55,1,0,0,0,324,325,5,53,0,0,325,
		327,5,37,0,0,326,328,5,22,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,57,1,
		0,0,0,329,334,3,60,30,0,330,334,3,62,31,0,331,334,3,64,32,0,332,334,3,
		66,33,0,333,329,1,0,0,0,333,330,1,0,0,0,333,331,1,0,0,0,333,332,1,0,0,
		0,334,59,1,0,0,0,335,337,5,28,0,0,336,335,1,0,0,0,336,337,1,0,0,0,337,
		338,1,0,0,0,338,341,5,50,0,0,339,340,7,8,0,0,340,342,5,50,0,0,341,339,
		1,0,0,0,341,342,1,0,0,0,342,347,1,0,0,0,343,344,7,9,0,0,344,346,3,58,29,
		0,345,343,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,
		61,1,0,0,0,349,347,1,0,0,0,350,351,7,2,0,0,351,352,7,10,0,0,352,357,7,
		2,0,0,353,354,7,9,0,0,354,356,3,58,29,0,355,353,1,0,0,0,356,359,1,0,0,
		0,357,355,1,0,0,0,357,358,1,0,0,0,358,63,1,0,0,0,359,357,1,0,0,0,360,361,
		7,11,0,0,361,362,7,8,0,0,362,367,7,11,0,0,363,364,7,9,0,0,364,366,3,58,
		29,0,365,363,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,
		65,1,0,0,0,369,367,1,0,0,0,370,372,5,28,0,0,371,370,1,0,0,0,371,372,1,
		0,0,0,372,373,1,0,0,0,373,376,5,53,0,0,374,375,7,10,0,0,375,377,5,53,0,
		0,376,374,1,0,0,0,376,377,1,0,0,0,377,382,1,0,0,0,378,379,7,9,0,0,379,
		381,3,58,29,0,380,378,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,
		1,0,0,0,383,67,1,0,0,0,384,382,1,0,0,0,385,386,5,9,0,0,386,387,5,16,0,
		0,387,388,3,58,29,0,388,389,5,17,0,0,389,390,5,18,0,0,390,391,3,2,1,0,
		391,402,5,19,0,0,392,393,5,10,0,0,393,394,5,16,0,0,394,395,3,58,29,0,395,
		396,5,17,0,0,396,397,5,18,0,0,397,398,3,2,1,0,398,399,5,19,0,0,399,401,
		1,0,0,0,400,392,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,
		0,403,410,1,0,0,0,404,402,1,0,0,0,405,406,5,11,0,0,406,407,5,18,0,0,407,
		408,3,2,1,0,408,409,5,19,0,0,409,411,1,0,0,0,410,405,1,0,0,0,410,411,1,
		0,0,0,411,69,1,0,0,0,412,413,5,12,0,0,413,414,5,16,0,0,414,415,3,58,29,
		0,415,416,5,17,0,0,416,417,5,18,0,0,417,418,3,2,1,0,418,419,5,19,0,0,419,
		71,1,0,0,0,420,429,5,49,0,0,421,429,5,53,0,0,422,429,5,52,0,0,423,429,
		5,48,0,0,424,429,5,51,0,0,425,429,5,50,0,0,426,429,3,38,19,0,427,429,3,
		58,29,0,428,420,1,0,0,0,428,421,1,0,0,0,428,422,1,0,0,0,428,423,1,0,0,
		0,428,424,1,0,0,0,428,425,1,0,0,0,428,426,1,0,0,0,428,427,1,0,0,0,429,
		73,1,0,0,0,430,433,3,76,38,0,431,433,3,78,39,0,432,430,1,0,0,0,432,431,
		1,0,0,0,433,75,1,0,0,0,434,442,3,86,43,0,435,442,3,88,44,0,436,442,3,90,
		45,0,437,442,3,92,46,0,438,442,3,94,47,0,439,442,3,96,48,0,440,442,3,98,
		49,0,441,434,1,0,0,0,441,435,1,0,0,0,441,436,1,0,0,0,441,437,1,0,0,0,441,
		438,1,0,0,0,441,439,1,0,0,0,441,440,1,0,0,0,442,77,1,0,0,0,443,444,5,53,
		0,0,444,457,5,16,0,0,445,446,7,1,0,0,446,452,5,53,0,0,447,448,5,23,0,0,
		448,449,7,1,0,0,449,451,5,53,0,0,450,447,1,0,0,0,451,454,1,0,0,0,452,450,
		1,0,0,0,452,453,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,455,445,1,0,0,
		0,456,459,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,
		457,1,0,0,0,460,461,5,17,0,0,461,462,5,18,0,0,462,463,3,2,1,0,463,464,
		5,19,0,0,464,79,1,0,0,0,465,473,3,100,50,0,466,473,3,102,51,0,467,473,
		3,104,52,0,468,473,3,106,53,0,469,473,3,108,54,0,470,473,3,110,55,0,471,
		473,3,112,56,0,472,465,1,0,0,0,472,466,1,0,0,0,472,467,1,0,0,0,472,468,
		1,0,0,0,472,469,1,0,0,0,472,470,1,0,0,0,472,471,1,0,0,0,473,81,1,0,0,0,
		474,475,5,13,0,0,475,476,5,53,0,0,476,481,5,18,0,0,477,480,3,6,3,0,478,
		480,3,74,37,0,479,477,1,0,0,0,479,478,1,0,0,0,480,483,1,0,0,0,481,479,
		1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,481,1,0,0,0,484,485,5,19,0,
		0,485,83,1,0,0,0,486,487,5,53,0,0,487,489,5,24,0,0,488,486,1,0,0,0,489,
		492,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,493,1,0,0,0,492,490,1,
		0,0,0,493,494,5,53,0,0,494,505,5,16,0,0,495,500,7,0,0,0,496,497,5,23,0,
		0,497,499,7,0,0,0,498,496,1,0,0,0,499,502,1,0,0,0,500,498,1,0,0,0,500,
		501,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,503,495,1,0,0,0,504,507,1,
		0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,0,
		508,509,5,17,0,0,509,510,5,22,0,0,510,85,1,0,0,0,511,512,5,14,0,0,512,
		513,5,53,0,0,513,526,5,16,0,0,514,515,7,1,0,0,515,521,5,53,0,0,516,517,
		5,23,0,0,517,518,7,1,0,0,518,520,5,53,0,0,519,516,1,0,0,0,520,523,1,0,
		0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,524,
		514,1,0,0,0,525,528,1,0,0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,529,1,
		0,0,0,528,526,1,0,0,0,529,530,5,17,0,0,530,531,5,18,0,0,531,532,3,2,1,
		0,532,533,3,100,50,0,533,534,5,19,0,0,534,87,1,0,0,0,535,536,5,6,0,0,536,
		537,5,53,0,0,537,550,5,16,0,0,538,539,7,1,0,0,539,545,5,53,0,0,540,541,
		5,23,0,0,541,542,7,1,0,0,542,544,5,53,0,0,543,540,1,0,0,0,544,547,1,0,
		0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,549,1,0,0,0,547,545,1,0,0,0,548,
		538,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,553,1,
		0,0,0,552,550,1,0,0,0,553,554,5,17,0,0,554,555,5,18,0,0,555,556,3,2,1,
		0,556,557,3,102,51,0,557,558,5,19,0,0,558,89,1,0,0,0,559,560,5,7,0,0,560,
		561,5,53,0,0,561,574,5,16,0,0,562,563,7,1,0,0,563,569,5,53,0,0,564,565,
		5,23,0,0,565,566,7,1,0,0,566,568,5,53,0,0,567,564,1,0,0,0,568,571,1,0,
		0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,573,1,0,0,0,571,569,1,0,0,0,572,
		562,1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,577,1,
		0,0,0,576,574,1,0,0,0,577,578,5,17,0,0,578,579,5,18,0,0,579,580,3,2,1,
		0,580,581,3,104,52,0,581,582,5,19,0,0,582,91,1,0,0,0,583,584,5,4,0,0,584,
		585,5,53,0,0,585,598,5,16,0,0,586,587,7,1,0,0,587,593,5,53,0,0,588,589,
		5,23,0,0,589,590,7,1,0,0,590,592,5,53,0,0,591,588,1,0,0,0,592,595,1,0,
		0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,596,
		586,1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,601,1,
		0,0,0,600,598,1,0,0,0,601,602,5,17,0,0,602,603,5,18,0,0,603,604,3,2,1,
		0,604,605,3,106,53,0,605,606,5,19,0,0,606,93,1,0,0,0,607,608,5,5,0,0,608,
		609,5,53,0,0,609,622,5,16,0,0,610,611,7,1,0,0,611,617,5,53,0,0,612,613,
		5,23,0,0,613,614,7,1,0,0,614,616,5,53,0,0,615,612,1,0,0,0,616,619,1,0,
		0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,620,
		610,1,0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,622,623,1,0,0,0,623,625,1,
		0,0,0,624,622,1,0,0,0,625,626,5,17,0,0,626,627,5,18,0,0,627,628,3,2,1,
		0,628,629,3,108,54,0,629,630,5,19,0,0,630,95,1,0,0,0,631,632,5,3,0,0,632,
		633,5,53,0,0,633,646,5,16,0,0,634,635,7,1,0,0,635,641,5,53,0,0,636,637,
		5,23,0,0,637,638,7,1,0,0,638,640,5,53,0,0,639,636,1,0,0,0,640,643,1,0,
		0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,645,1,0,0,0,643,641,1,0,0,0,644,
		634,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,649,1,
		0,0,0,648,646,1,0,0,0,649,650,5,17,0,0,650,651,5,18,0,0,651,652,3,2,1,
		0,652,653,3,110,55,0,653,654,5,19,0,0,654,97,1,0,0,0,655,656,5,53,0,0,
		656,657,5,53,0,0,657,670,5,16,0,0,658,659,7,1,0,0,659,665,5,53,0,0,660,
		661,5,23,0,0,661,662,7,1,0,0,662,664,5,53,0,0,663,660,1,0,0,0,664,667,
		1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,
		0,668,658,1,0,0,0,669,672,1,0,0,0,670,668,1,0,0,0,670,671,1,0,0,0,671,
		673,1,0,0,0,672,670,1,0,0,0,673,674,5,17,0,0,674,675,5,18,0,0,675,676,
		3,2,1,0,676,677,3,112,56,0,677,678,5,19,0,0,678,99,1,0,0,0,679,680,5,15,
		0,0,680,681,5,22,0,0,681,101,1,0,0,0,682,688,5,15,0,0,683,689,5,48,0,0,
		684,689,5,53,0,0,685,689,3,40,20,0,686,689,3,46,23,0,687,689,3,50,25,0,
		688,683,1,0,0,0,688,684,1,0,0,0,688,685,1,0,0,0,688,686,1,0,0,0,688,687,
		1,0,0,0,689,690,1,0,0,0,690,691,5,22,0,0,691,103,1,0,0,0,692,698,5,15,
		0,0,693,699,5,51,0,0,694,699,5,53,0,0,695,699,3,42,21,0,696,699,3,48,24,
		0,697,699,3,52,26,0,698,693,1,0,0,0,698,694,1,0,0,0,698,695,1,0,0,0,698,
		696,1,0,0,0,698,697,1,0,0,0,699,700,1,0,0,0,700,701,5,22,0,0,701,105,1,
		0,0,0,702,703,5,15,0,0,703,704,7,12,0,0,704,705,5,22,0,0,705,107,1,0,0,
		0,706,707,5,15,0,0,707,708,7,13,0,0,708,709,5,22,0,0,709,109,1,0,0,0,710,
		714,5,15,0,0,711,715,5,50,0,0,712,715,5,53,0,0,713,715,3,58,29,0,714,711,
		1,0,0,0,714,712,1,0,0,0,714,713,1,0,0,0,715,716,1,0,0,0,716,717,5,22,0,
		0,717,111,1,0,0,0,718,719,5,15,0,0,719,720,5,53,0,0,720,721,5,22,0,0,721,
		113,1,0,0,0,65,117,123,137,139,163,171,185,195,205,219,240,245,249,252,
		264,272,274,282,289,297,302,307,312,317,322,327,333,336,341,347,357,367,
		371,376,382,402,410,428,432,441,452,457,472,479,481,490,500,505,521,526,
		545,550,569,574,593,598,617,622,641,646,665,670,688,698,714
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
