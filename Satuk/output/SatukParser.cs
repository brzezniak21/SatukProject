//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Msi/RiderProjects/Satuk/Satuk/Satuk.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SatukParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, LPAREN=16, 
		RPAREN=17, LBRACE=18, RBRACE=19, LBRACK=20, RBRACK=21, SEMICOLON=22, COMMA=23, 
		DOT=24, ASSIGN=25, GT=26, LT=27, NOT=28, QUESTION=29, EQUAL=30, LE=31, 
		GE=32, NOTEQUAL=33, AND=34, OR=35, INC=36, DEC=37, ADD=38, SUB=39, MUL=40, 
		DIV=41, MOD=42, ADD_ASSIGN=43, SUB_ASSIGN=44, MUL_ASSIGN=45, DIV_ASSIGN=46, 
		WS=47, INT=48, STRING=49, BOOL=50, FLOAT=51, CHAR=52, VARIABLE=53;
	public const int
		RULE_program = 0, RULE_prog = 1, RULE_print = 2, RULE_print_content = 3, 
		RULE_assignment = 4, RULE_assignment_function = 5, RULE_arithmetics = 6, 
		RULE_mutators = 7, RULE_logical_instructions = 8, RULE_if_statement = 9, 
		RULE_loop = 10, RULE_functions = 11, RULE_function = 12, RULE_constructor = 13, 
		RULE_return = 14, RULE_class = 15, RULE_execute_function = 16, RULE_void_function = 17, 
		RULE_int_function = 18, RULE_float_function = 19, RULE_string_function = 20, 
		RULE_char_function = 21, RULE_bool_function = 22, RULE_variable_function = 23, 
		RULE_void_return = 24, RULE_int_return = 25, RULE_float_return = 26, RULE_string_return = 27, 
		RULE_char_return = 28, RULE_bool_return = 29, RULE_variable_return = 30;
	public static readonly string[] ruleNames = {
		"program", "prog", "print", "print_content", "assignment", "assignment_function", 
		"arithmetics", "mutators", "logical_instructions", "if_statement", "loop", 
		"functions", "function", "constructor", "return", "class", "execute_function", 
		"void_function", "int_function", "float_function", "string_function", 
		"char_function", "bool_function", "variable_function", "void_return", 
		"int_return", "float_return", "string_return", "char_return", "bool_return", 
		"variable_return"
	};

	private static readonly string[] _LiteralNames = {
		null, "'program'", "'display'", "'bool'", "'string'", "'char'", "'int'", 
		"'float'", "'new'", "'if'", "'else if'", "'else'", "'loop'", "'class'", 
		"'void'", "'return'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", 
		"','", "'.'", "'='", "'>'", "'<'", "'!'", "'?'", "'=='", "'<='", "'>='", 
		null, "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'+='", "'-='", "'*='", "'/='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
		"RBRACK", "SEMICOLON", "COMMA", "DOT", "ASSIGN", "GT", "LT", "NOT", "QUESTION", 
		"EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", 
		"MUL", "DIV", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
		"WS", "INT", "STRING", "BOOL", "FLOAT", "CHAR", "VARIABLE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Satuk.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SatukParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SatukParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SatukParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext[] functions() {
			return GetRuleContexts<FunctionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext functions(int i) {
			return GetRuleContext<FunctionsContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 62;
				@class();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254757624L) != 0)) {
				{
				{
				State = 68;
				functions();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74;
			Match(T__0);
			State = 75;
			Match(LBRACE);
			State = 76;
			prog();
			State = 77;
			@return();
			State = 78;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext[] if_statement() {
			return GetRuleContexts<If_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement(int i) {
			return GetRuleContext<If_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext[] loop() {
			return GetRuleContexts<LoopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop(int i) {
			return GetRuleContext<LoopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext[] print() {
			return GetRuleContexts<PrintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print(int i) {
			return GetRuleContext<PrintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_functionContext[] execute_function() {
			return GetRuleContexts<Execute_functionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_functionContext execute_function(int i) {
			return GetRuleContext<Execute_functionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MutatorsContext[] mutators() {
			return GetRuleContexts<MutatorsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MutatorsContext mutators(int i) {
			return GetRuleContext<MutatorsContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 2, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254745852L) != 0)) {
				{
				State = 86;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 80;
					assignment();
					}
					break;
				case 2:
					{
					State = 81;
					if_statement();
					}
					break;
				case 3:
					{
					State = 82;
					loop();
					}
					break;
				case 4:
					{
					State = 83;
					print();
					}
					break;
				case 5:
					{
					State = 84;
					execute_function();
					}
					break;
				case 6:
					{
					State = 85;
					mutators();
					}
					break;
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
	 
		public PrintContext() { }
		public virtual void CopyFrom(PrintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DisplayContext : PrintContext {
		public Print_contentContext result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Print_contentContext print_content() {
			return GetRuleContext<Print_contentContext>(0);
		}
		public DisplayContext(PrintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 4, RULE_print);
		try {
			_localctx = new DisplayContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(T__1);
			State = 92;
			Match(LPAREN);
			State = 93;
			((DisplayContext)_localctx).result = print_content();
			State = 94;
			Match(RPAREN);
			State = 95;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_contentContext : ParserRuleContext {
		public Print_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_content; } }
	 
		public Print_contentContext() { }
		public virtual void CopyFrom(Print_contentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Print_boolContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SatukParser.BOOL, 0); }
		public Print_boolContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_bool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_bool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_bool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_intContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		public Print_intContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_int(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DisplayStringContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SatukParser.STRING, 0); }
		public DisplayStringContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterDisplayString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitDisplayString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplayString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_charContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(SatukParser.CHAR, 0); }
		public Print_charContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_char(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_char(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_char(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_arithmeticsContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		public Print_arithmeticsContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_arithmetics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_arithmetics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_arithmetics(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_variableContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		public Print_variableContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_variable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_logicalInstructionsContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		public Print_logicalInstructionsContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_logicalInstructions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_logicalInstructions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_logicalInstructions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_floatContext : Print_contentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		public Print_floatContext(Print_contentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterPrint_float(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitPrint_float(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_float(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_contentContext print_content() {
		Print_contentContext _localctx = new Print_contentContext(Context, State);
		EnterRule(_localctx, 6, RULE_print_content);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new DisplayStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				Match(STRING);
				}
				break;
			case 2:
				_localctx = new Print_variableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				Match(VARIABLE);
				}
				break;
			case 3:
				_localctx = new Print_charContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 99;
				Match(CHAR);
				}
				break;
			case 4:
				_localctx = new Print_intContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 100;
				Match(INT);
				}
				break;
			case 5:
				_localctx = new Print_floatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 101;
				Match(FLOAT);
				}
				break;
			case 6:
				_localctx = new Print_boolContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 102;
				Match(BOOL);
				}
				break;
			case 7:
				_localctx = new Print_arithmeticsContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 103;
				arithmetics(0);
				}
				break;
			case 8:
				_localctx = new Print_logicalInstructionsContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 104;
				logical_instructions(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarDynAssContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SatukParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SatukParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(SatukParser.CHAR, 0); }
		public VarDynAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterVarDynAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitVarDynAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDynAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAssContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SatukParser.STRING, 0); }
		public StringAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterStringAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitStringAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharAssContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(SatukParser.CHAR, 0); }
		public CharAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterCharAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitCharAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArAssContext : AssignmentContext {
		public ArithmeticsContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		public ArAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterArAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitArAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassAssContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(SatukParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(SatukParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SatukParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SatukParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(SatukParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(SatukParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR() { return GetTokens(SatukParser.CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR(int i) {
			return GetToken(SatukParser.CHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOOL() { return GetTokens(SatukParser.BOOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL(int i) {
			return GetToken(SatukParser.BOOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public ClassAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterClassAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitClassAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolAssContext : AssignmentContext {
		public Logical_instructionsContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		public BoolAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterBoolAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitBoolAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntConstAssContext : AssignmentContext {
		public ArithmeticsContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		public IntConstAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterIntConstAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitIntConstAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntConstAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatConstAssContext : AssignmentContext {
		public ArithmeticsContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		public FloatConstAssContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFloatConstAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFloatConstAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatConstAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignment);
		int _la;
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new ArAssContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				Match(VARIABLE);
				State = 108;
				Match(ASSIGN);
				State = 109;
				((ArAssContext)_localctx).expr = arithmetics(0);
				State = 110;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new BoolAssContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 112;
				Match(T__2);
				State = 113;
				Match(VARIABLE);
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 114;
					Match(ASSIGN);
					State = 115;
					((BoolAssContext)_localctx).expr = logical_instructions(0);
					}
				}

				State = 118;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new StringAssContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 119;
				Match(T__3);
				State = 120;
				Match(VARIABLE);
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 121;
					Match(ASSIGN);
					State = 122;
					Match(STRING);
					}
				}

				State = 125;
				Match(SEMICOLON);
				}
				break;
			case 4:
				_localctx = new CharAssContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 126;
				Match(T__4);
				State = 127;
				Match(VARIABLE);
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 128;
					Match(ASSIGN);
					State = 129;
					Match(CHAR);
					}
				}

				State = 132;
				Match(SEMICOLON);
				}
				break;
			case 5:
				_localctx = new IntConstAssContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 133;
				Match(T__5);
				State = 134;
				Match(VARIABLE);
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 135;
					Match(ASSIGN);
					State = 136;
					((IntConstAssContext)_localctx).expr = arithmetics(0);
					}
				}

				State = 139;
				Match(SEMICOLON);
				}
				break;
			case 6:
				_localctx = new VarDynAssContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 140;
				Match(VARIABLE);
				State = 141;
				Match(ASSIGN);
				State = 142;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8725724278030336L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 143;
				Match(SEMICOLON);
				}
				break;
			case 7:
				_localctx = new FloatConstAssContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 144;
				Match(T__6);
				State = 145;
				Match(VARIABLE);
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 146;
					Match(ASSIGN);
					State = 147;
					((FloatConstAssContext)_localctx).expr = arithmetics(0);
					}
				}

				State = 150;
				Match(SEMICOLON);
				}
				break;
			case 8:
				_localctx = new ClassAssContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 151;
				Match(VARIABLE);
				State = 152;
				Match(VARIABLE);
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 153;
					Match(ASSIGN);
					State = 154;
					Match(T__7);
					State = 155;
					Match(VARIABLE);
					State = 156;
					Match(LPAREN);
					State = 167;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) {
						{
						{
						State = 157;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 162;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 158;
							Match(COMMA);
							State = 159;
							_la = TokenStream.LA(1);
							if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 164;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						State = 169;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 170;
					Match(RPAREN);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SatukParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_functionContext execute_function() {
			return GetRuleContext<Execute_functionContext>(0);
		}
		public Assignment_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterAssignment_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitAssignment_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_functionContext assignment_function() {
		Assignment_functionContext _localctx = new Assignment_functionContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignment_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 175;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 178;
			Match(VARIABLE);
			State = 179;
			Match(ASSIGN);
			State = 180;
			execute_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticsContext : ParserRuleContext {
		public ArithmeticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetics; } }
	 
		public ArithmeticsContext() { }
		public virtual void CopyFrom(ArithmeticsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberArithmContext : ArithmeticsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		public NumberArithmContext(ArithmeticsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterNumberArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitNumberArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberArithm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenArithmContext : ArithmeticsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		public ParenArithmContext(ArithmeticsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterParenArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitParenArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenArithm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpArithmContext : ArithmeticsContext {
		public ArithmeticsContext left;
		public IToken op;
		public ArithmeticsContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext[] arithmetics() {
			return GetRuleContexts<ArithmeticsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics(int i) {
			return GetRuleContext<ArithmeticsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(SatukParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(SatukParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(SatukParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(SatukParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(SatukParser.SUB, 0); }
		public OpArithmContext(ArithmeticsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterOpArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitOpArithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpArithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticsContext arithmetics() {
		return arithmetics(0);
	}

	private ArithmeticsContext arithmetics(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticsContext _localctx = new ArithmeticsContext(Context, _parentState);
		ArithmeticsContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_arithmetics, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				_localctx = new ParenArithmContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 183;
				Match(LPAREN);
				State = 184;
				arithmetics(0);
				State = 185;
				Match(RPAREN);
				}
				break;
			case INT:
			case FLOAT:
			case VARIABLE:
				{
				_localctx = new NumberArithmContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 187;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 11540474045136896L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 198;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 196;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new OpArithmContext(new ArithmeticsContext(_parentctx, _parentState));
						((OpArithmContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetics);
						State = 190;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 191;
						((OpArithmContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7696581394432L) != 0)) ) {
							((OpArithmContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 192;
						((OpArithmContext)_localctx).right = arithmetics(5);
						}
						break;
					case 2:
						{
						_localctx = new OpArithmContext(new ArithmeticsContext(_parentctx, _parentState));
						((OpArithmContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetics);
						State = 193;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 194;
						((OpArithmContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((OpArithmContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 195;
						((OpArithmContext)_localctx).right = arithmetics(4);
						}
						break;
					}
					} 
				}
				State = 200;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MutatorsContext : ParserRuleContext {
		public MutatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutators; } }
	 
		public MutatorsContext() { }
		public virtual void CopyFrom(MutatorsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IncVarContext : MutatorsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(SatukParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public IncVarContext(MutatorsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterIncVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitIncVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecVarContext : MutatorsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SatukParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public DecVarContext(MutatorsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterDecVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitDecVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MutatorsContext mutators() {
		MutatorsContext _localctx = new MutatorsContext(Context, State);
		EnterRule(_localctx, 14, RULE_mutators);
		int _la;
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new IncVarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				Match(VARIABLE);
				State = 202;
				Match(INC);
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 203;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 2:
				_localctx = new DecVarContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 206;
				Match(VARIABLE);
				State = 207;
				Match(DEC);
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 208;
					Match(SEMICOLON);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_instructionsContext : ParserRuleContext {
		public Logical_instructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_instructions; } }
	 
		public Logical_instructionsContext() { }
		public virtual void CopyFrom(Logical_instructionsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotLogicalContext : Logical_instructionsContext {
		public Logical_instructionsContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SatukParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		public NotLogicalContext(Logical_instructionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterNotLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitNotLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpLogicalContext : Logical_instructionsContext {
		public Logical_instructionsContext left;
		public IToken op;
		public Logical_instructionsContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext[] logical_instructions() {
			return GetRuleContexts<Logical_instructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions(int i) {
			return GetRuleContext<Logical_instructionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(SatukParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(SatukParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SatukParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SatukParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SatukParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(SatukParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SatukParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SatukParser.AND, 0); }
		public OpLogicalContext(Logical_instructionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterOpLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitOpLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarLogicalContext : Logical_instructionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SatukParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		public VarLogicalContext(Logical_instructionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterVarLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitVarLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarLogical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_instructionsContext logical_instructions() {
		return logical_instructions(0);
	}

	private Logical_instructionsContext logical_instructions(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_instructionsContext _localctx = new Logical_instructionsContext(Context, _parentState);
		Logical_instructionsContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_logical_instructions, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				{
				_localctx = new NotLogicalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 214;
				Match(NOT);
				State = 215;
				((NotLogicalContext)_localctx).expr = logical_instructions(4);
				}
				break;
			case LPAREN:
			case INT:
			case BOOL:
			case FLOAT:
			case VARIABLE:
				{
				_localctx = new VarLogicalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 222;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 216;
					Match(FLOAT);
					}
					break;
				case 2:
					{
					State = 217;
					Match(INT);
					}
					break;
				case 3:
					{
					State = 218;
					Match(VARIABLE);
					}
					break;
				case 4:
					{
					State = 219;
					Match(BOOL);
					}
					break;
				case 5:
					{
					State = 220;
					Match(VARIABLE);
					}
					break;
				case 6:
					{
					State = 221;
					arithmetics(0);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 234;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 232;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new OpLogicalContext(new Logical_instructionsContext(_parentctx, _parentState));
						((OpLogicalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_logical_instructions);
						State = 226;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 227;
						((OpLogicalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16307453952L) != 0)) ) {
							((OpLogicalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 228;
						((OpLogicalContext)_localctx).right = logical_instructions(4);
						}
						break;
					case 2:
						{
						_localctx = new OpLogicalContext(new Logical_instructionsContext(_parentctx, _parentState));
						((OpLogicalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_logical_instructions);
						State = 229;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 230;
						((OpLogicalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
							((OpLogicalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 231;
						((OpLogicalContext)_localctx).right = logical_instructions(3);
						}
						break;
					}
					} 
				}
				State = 236;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(SatukParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(SatukParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext[] logical_instructions() {
			return GetRuleContexts<Logical_instructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions(int i) {
			return GetRuleContext<Logical_instructionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(SatukParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(SatukParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACE() { return GetTokens(SatukParser.LBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE(int i) {
			return GetToken(SatukParser.LBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext[] prog() {
			return GetRuleContexts<ProgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog(int i) {
			return GetRuleContext<ProgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACE() { return GetTokens(SatukParser.RBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE(int i) {
			return GetToken(SatukParser.RBRACE, i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(T__8);
			State = 238;
			Match(LPAREN);
			State = 239;
			logical_instructions(0);
			State = 240;
			Match(RPAREN);
			State = 241;
			Match(LBRACE);
			State = 242;
			prog();
			State = 243;
			Match(RBRACE);
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 244;
				Match(T__9);
				State = 245;
				Match(LPAREN);
				State = 246;
				logical_instructions(0);
				State = 247;
				Match(RPAREN);
				State = 248;
				Match(LBRACE);
				State = 249;
				prog();
				State = 250;
				Match(RBRACE);
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 257;
				Match(T__10);
				State = 258;
				Match(LBRACE);
				State = 259;
				prog();
				State = 260;
				Match(RBRACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 20, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(T__11);
			State = 265;
			Match(LPAREN);
			State = 266;
			logical_instructions(0);
			State = 267;
			Match(RPAREN);
			State = 268;
			Match(LBRACE);
			State = 269;
			prog();
			State = 270;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public FunctionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsContext functions() {
		FunctionsContext _localctx = new FunctionsContext(Context, State);
		EnterRule(_localctx, 22, RULE_functions);
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273;
				constructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Void_functionContext void_function() {
			return GetRuleContext<Void_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_functionContext int_function() {
			return GetRuleContext<Int_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Float_functionContext float_function() {
			return GetRuleContext<Float_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_functionContext string_function() {
			return GetRuleContext<String_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_functionContext char_function() {
			return GetRuleContext<Char_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_functionContext bool_function() {
			return GetRuleContext<Bool_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_functionContext variable_function() {
			return GetRuleContext<Variable_functionContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 24, RULE_function);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276;
				void_function();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				int_function();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278;
				float_function();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 279;
				string_function();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 5);
				{
				State = 280;
				char_function();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 6);
				{
				State = 281;
				bool_function();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 282;
				variable_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
	 
		public ConstructorContext() { }
		public virtual void CopyFrom(ConstructorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructContext : ConstructorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public ConstructContext(ConstructorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 26, RULE_constructor);
		int _la;
		try {
			_localctx = new ConstructContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(VARIABLE);
			State = 286;
			Match(LPAREN);
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 287;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 288;
				Match(VARIABLE);
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 289;
					Match(COMMA);
					State = 290;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 291;
					Match(VARIABLE);
					}
					}
					State = 296;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 302;
			Match(RPAREN);
			State = 303;
			Match(LBRACE);
			State = 304;
			prog();
			State = 305;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Void_returnContext void_return() {
			return GetRuleContext<Void_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_returnContext int_return() {
			return GetRuleContext<Int_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Float_returnContext float_return() {
			return GetRuleContext<Float_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_returnContext string_return() {
			return GetRuleContext<String_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_returnContext char_return() {
			return GetRuleContext<Char_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_returnContext bool_return() {
			return GetRuleContext<Bool_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_returnContext variable_return() {
			return GetRuleContext<Variable_returnContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 28, RULE_return);
		try {
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307;
				void_return();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308;
				int_return();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 309;
				float_return();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 310;
				string_return();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 311;
				char_return();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 312;
				bool_return();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 313;
				variable_return();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext[] functions() {
			return GetRuleContexts<FunctionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext functions(int i) {
			return GetRuleContext<FunctionsContext>(i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 30, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(T__12);
			State = 317;
			Match(VARIABLE);
			State = 318;
			Match(LBRACE);
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254757624L) != 0)) {
				{
				State = 321;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 319;
					assignment();
					}
					break;
				case 2:
					{
					State = 320;
					functions();
					}
					break;
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 326;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SatukParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SatukParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(SatukParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(SatukParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SatukParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SatukParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(SatukParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(SatukParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR() { return GetTokens(SatukParser.CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR(int i) {
			return GetToken(SatukParser.CHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOOL() { return GetTokens(SatukParser.BOOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL(int i) {
			return GetToken(SatukParser.BOOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public Execute_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterExecute_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitExecute_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_functionContext execute_function() {
		Execute_functionContext _localctx = new Execute_functionContext(Context, State);
		EnterRule(_localctx, 32, RULE_execute_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 328;
					Match(VARIABLE);
					State = 329;
					Match(DOT);
					}
					} 
				}
				State = 334;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 335;
			Match(VARIABLE);
			State = 336;
			Match(LPAREN);
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) {
				{
				{
				State = 337;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 338;
					Match(COMMA);
					State = 339;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732923532771328L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 344;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 350;
			Match(RPAREN);
			State = 351;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Void_functionContext : ParserRuleContext {
		public Void_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_void_function; } }
	 
		public Void_functionContext() { }
		public virtual void CopyFrom(Void_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncVoidContext : Void_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Void_returnContext void_return() {
			return GetRuleContext<Void_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncVoidContext(Void_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncVoid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Void_functionContext void_function() {
		Void_functionContext _localctx = new Void_functionContext(Context, State);
		EnterRule(_localctx, 34, RULE_void_function);
		int _la;
		try {
			_localctx = new FuncVoidContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(T__13);
			State = 354;
			Match(VARIABLE);
			State = 355;
			Match(LPAREN);
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 356;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 357;
				Match(VARIABLE);
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 358;
					Match(COMMA);
					State = 359;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 360;
					Match(VARIABLE);
					}
					}
					State = 365;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 371;
			Match(RPAREN);
			State = 372;
			Match(LBRACE);
			State = 373;
			prog();
			State = 374;
			void_return();
			State = 375;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_functionContext : ParserRuleContext {
		public Int_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_function; } }
	 
		public Int_functionContext() { }
		public virtual void CopyFrom(Int_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncIntContext : Int_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_returnContext int_return() {
			return GetRuleContext<Int_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncIntContext(Int_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_functionContext int_function() {
		Int_functionContext _localctx = new Int_functionContext(Context, State);
		EnterRule(_localctx, 36, RULE_int_function);
		int _la;
		try {
			_localctx = new FuncIntContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			Match(T__5);
			State = 378;
			Match(VARIABLE);
			State = 379;
			Match(LPAREN);
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 380;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 381;
				Match(VARIABLE);
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 382;
					Match(COMMA);
					State = 383;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 384;
					Match(VARIABLE);
					}
					}
					State = 389;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 395;
			Match(RPAREN);
			State = 396;
			Match(LBRACE);
			State = 397;
			prog();
			State = 398;
			int_return();
			State = 399;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Float_functionContext : ParserRuleContext {
		public Float_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_function; } }
	 
		public Float_functionContext() { }
		public virtual void CopyFrom(Float_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncFloatContext : Float_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Float_returnContext float_return() {
			return GetRuleContext<Float_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncFloatContext(Float_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Float_functionContext float_function() {
		Float_functionContext _localctx = new Float_functionContext(Context, State);
		EnterRule(_localctx, 38, RULE_float_function);
		int _la;
		try {
			_localctx = new FuncFloatContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(T__6);
			State = 402;
			Match(VARIABLE);
			State = 403;
			Match(LPAREN);
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 404;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 405;
				Match(VARIABLE);
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 406;
					Match(COMMA);
					State = 407;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 408;
					Match(VARIABLE);
					}
					}
					State = 413;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 419;
			Match(RPAREN);
			State = 420;
			Match(LBRACE);
			State = 421;
			prog();
			State = 422;
			float_return();
			State = 423;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_functionContext : ParserRuleContext {
		public String_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_function; } }
	 
		public String_functionContext() { }
		public virtual void CopyFrom(String_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncStringContext : String_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_returnContext string_return() {
			return GetRuleContext<String_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncStringContext(String_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_functionContext string_function() {
		String_functionContext _localctx = new String_functionContext(Context, State);
		EnterRule(_localctx, 40, RULE_string_function);
		int _la;
		try {
			_localctx = new FuncStringContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			Match(T__3);
			State = 426;
			Match(VARIABLE);
			State = 427;
			Match(LPAREN);
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 428;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 429;
				Match(VARIABLE);
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 430;
					Match(COMMA);
					State = 431;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 432;
					Match(VARIABLE);
					}
					}
					State = 437;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 443;
			Match(RPAREN);
			State = 444;
			Match(LBRACE);
			State = 445;
			prog();
			State = 446;
			string_return();
			State = 447;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_functionContext : ParserRuleContext {
		public Char_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_function; } }
	 
		public Char_functionContext() { }
		public virtual void CopyFrom(Char_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncCharContext : Char_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_returnContext char_return() {
			return GetRuleContext<Char_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncCharContext(Char_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Char_functionContext char_function() {
		Char_functionContext _localctx = new Char_functionContext(Context, State);
		EnterRule(_localctx, 42, RULE_char_function);
		int _la;
		try {
			_localctx = new FuncCharContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(T__4);
			State = 450;
			Match(VARIABLE);
			State = 451;
			Match(LPAREN);
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 452;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 453;
				Match(VARIABLE);
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 454;
					Match(COMMA);
					State = 455;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 456;
					Match(VARIABLE);
					}
					}
					State = 461;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 467;
			Match(RPAREN);
			State = 468;
			Match(LBRACE);
			State = 469;
			prog();
			State = 470;
			char_return();
			State = 471;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_functionContext : ParserRuleContext {
		public Bool_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_function; } }
	 
		public Bool_functionContext() { }
		public virtual void CopyFrom(Bool_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncBoolContext : Bool_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_returnContext bool_return() {
			return GetRuleContext<Bool_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncBoolContext(Bool_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_functionContext bool_function() {
		Bool_functionContext _localctx = new Bool_functionContext(Context, State);
		EnterRule(_localctx, 44, RULE_bool_function);
		int _la;
		try {
			_localctx = new FuncBoolContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			Match(T__2);
			State = 474;
			Match(VARIABLE);
			State = 475;
			Match(LPAREN);
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 476;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 477;
				Match(VARIABLE);
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 478;
					Match(COMMA);
					State = 479;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 480;
					Match(VARIABLE);
					}
					}
					State = 485;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 491;
			Match(RPAREN);
			State = 492;
			Match(LBRACE);
			State = 493;
			prog();
			State = 494;
			bool_return();
			State = 495;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_functionContext : ParserRuleContext {
		public Variable_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_function; } }
	 
		public Variable_functionContext() { }
		public virtual void CopyFrom(Variable_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncVarContext : Variable_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SatukParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SatukParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SatukParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SatukParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SatukParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_returnContext variable_return() {
			return GetRuleContext<Variable_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SatukParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SatukParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SatukParser.COMMA, i);
		}
		public FuncVarContext(Variable_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterFuncVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitFuncVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_functionContext variable_function() {
		Variable_functionContext _localctx = new Variable_functionContext(Context, State);
		EnterRule(_localctx, 46, RULE_variable_function);
		int _la;
		try {
			_localctx = new FuncVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			Match(VARIABLE);
			State = 498;
			Match(VARIABLE);
			State = 499;
			Match(LPAREN);
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) {
				{
				{
				State = 500;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 501;
				Match(VARIABLE);
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 502;
					Match(COMMA);
					State = 503;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254741240L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 504;
					Match(VARIABLE);
					}
					}
					State = 509;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 515;
			Match(RPAREN);
			State = 516;
			Match(LBRACE);
			State = 517;
			prog();
			State = 518;
			variable_return();
			State = 519;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Void_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public Void_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_void_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterVoid_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitVoid_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoid_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Void_returnContext void_return() {
		Void_returnContext _localctx = new Void_returnContext(Context, State);
		EnterRule(_localctx, 48, RULE_void_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			Match(T__14);
			State = 522;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_returnContext : ParserRuleContext {
		public Int_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_return; } }
	 
		public Int_returnContext() { }
		public virtual void CopyFrom(Int_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetIntContext : Int_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SatukParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		public RetIntContext(Int_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_returnContext int_return() {
		Int_returnContext _localctx = new Int_returnContext(Context, State);
		EnterRule(_localctx, 50, RULE_int_return);
		try {
			_localctx = new RetIntContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			Match(T__14);
			State = 528;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 525;
				Match(INT);
				}
				break;
			case 2:
				{
				State = 526;
				Match(VARIABLE);
				}
				break;
			case 3:
				{
				State = 527;
				arithmetics(0);
				}
				break;
			}
			State = 530;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Float_returnContext : ParserRuleContext {
		public Float_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_return; } }
	 
		public Float_returnContext() { }
		public virtual void CopyFrom(Float_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetFloatContext : Float_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SatukParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticsContext arithmetics() {
			return GetRuleContext<ArithmeticsContext>(0);
		}
		public RetFloatContext(Float_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Float_returnContext float_return() {
		Float_returnContext _localctx = new Float_returnContext(Context, State);
		EnterRule(_localctx, 52, RULE_float_return);
		try {
			_localctx = new RetFloatContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			Match(T__14);
			State = 536;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 533;
				Match(FLOAT);
				}
				break;
			case 2:
				{
				State = 534;
				Match(VARIABLE);
				}
				break;
			case 3:
				{
				State = 535;
				arithmetics(0);
				}
				break;
			}
			State = 538;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_returnContext : ParserRuleContext {
		public String_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_return; } }
	 
		public String_returnContext() { }
		public virtual void CopyFrom(String_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetStringContext : String_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SatukParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		public RetStringContext(String_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_returnContext string_return() {
		String_returnContext _localctx = new String_returnContext(Context, State);
		EnterRule(_localctx, 54, RULE_string_return);
		int _la;
		try {
			_localctx = new RetStringContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			Match(T__14);
			State = 541;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==VARIABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 542;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_returnContext : ParserRuleContext {
		public Char_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_return; } }
	 
		public Char_returnContext() { }
		public virtual void CopyFrom(Char_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetCharContext : Char_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(SatukParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		public RetCharContext(Char_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Char_returnContext char_return() {
		Char_returnContext _localctx = new Char_returnContext(Context, State);
		EnterRule(_localctx, 56, RULE_char_return);
		int _la;
		try {
			_localctx = new RetCharContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			Match(T__14);
			State = 545;
			_la = TokenStream.LA(1);
			if ( !(_la==CHAR || _la==VARIABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 546;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_returnContext : ParserRuleContext {
		public Bool_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_return; } }
	 
		public Bool_returnContext() { }
		public virtual void CopyFrom(Bool_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetBoolContext : Bool_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SatukParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_instructionsContext logical_instructions() {
			return GetRuleContext<Logical_instructionsContext>(0);
		}
		public RetBoolContext(Bool_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_returnContext bool_return() {
		Bool_returnContext _localctx = new Bool_returnContext(Context, State);
		EnterRule(_localctx, 58, RULE_bool_return);
		try {
			_localctx = new RetBoolContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			Match(T__14);
			State = 552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 549;
				Match(BOOL);
				}
				break;
			case 2:
				{
				State = 550;
				Match(VARIABLE);
				}
				break;
			case 3:
				{
				State = 551;
				logical_instructions(0);
				}
				break;
			}
			State = 554;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_returnContext : ParserRuleContext {
		public Variable_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_return; } }
	 
		public Variable_returnContext() { }
		public virtual void CopyFrom(Variable_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RetVarContext : Variable_returnContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SatukParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SatukParser.SEMICOLON, 0); }
		public RetVarContext(Variable_returnContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.EnterRetVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISatukListener typedListener = listener as ISatukListener;
			if (typedListener != null) typedListener.ExitRetVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISatukVisitor<TResult> typedVisitor = visitor as ISatukVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_returnContext variable_return() {
		Variable_returnContext _localctx = new Variable_returnContext(Context, State);
		EnterRule(_localctx, 60, RULE_variable_return);
		try {
			_localctx = new RetVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			Match(T__14);
			State = 557;
			Match(VARIABLE);
			State = 558;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return arithmetics_sempred((ArithmeticsContext)_localctx, predIndex);
		case 8: return logical_instructions_sempred((Logical_instructionsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmetics_sempred(ArithmeticsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}
	private bool logical_instructions_sempred(Logical_instructionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,53,561,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,1,0,5,0,64,8,0,10,0,12,0,67,9,0,1,0,5,0,70,8,0,10,
		0,12,0,73,9,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,5,1,87,8,
		1,10,1,12,1,90,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,3,3,106,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,117,8,4,1,4,1,
		4,1,4,1,4,1,4,3,4,124,8,4,1,4,1,4,1,4,1,4,1,4,3,4,131,8,4,1,4,1,4,1,4,
		1,4,1,4,3,4,138,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,149,8,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,161,8,4,10,4,12,4,164,9,4,5,
		4,166,8,4,10,4,12,4,169,9,4,1,4,3,4,172,8,4,3,4,174,8,4,1,5,3,5,177,8,
		5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,189,8,6,1,6,1,6,1,6,1,6,
		1,6,1,6,5,6,197,8,6,10,6,12,6,200,9,6,1,7,1,7,1,7,3,7,205,8,7,1,7,1,7,
		1,7,3,7,210,8,7,3,7,212,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,223,
		8,8,3,8,225,8,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,233,8,8,10,8,12,8,236,9,8,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,253,8,
		9,10,9,12,9,256,9,9,1,9,1,9,1,9,1,9,1,9,3,9,263,8,9,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,11,1,11,3,11,275,8,11,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,3,12,284,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,293,8,13,
		10,13,12,13,296,9,13,5,13,298,8,13,10,13,12,13,301,9,13,1,13,1,13,1,13,
		1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,315,8,14,1,15,1,15,1,
		15,1,15,1,15,5,15,322,8,15,10,15,12,15,325,9,15,1,15,1,15,1,16,1,16,5,
		16,331,8,16,10,16,12,16,334,9,16,1,16,1,16,1,16,1,16,1,16,5,16,341,8,16,
		10,16,12,16,344,9,16,5,16,346,8,16,10,16,12,16,349,9,16,1,16,1,16,1,16,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,362,8,17,10,17,12,17,365,
		9,17,5,17,367,8,17,10,17,12,17,370,9,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,386,8,18,10,18,12,18,389,
		9,18,5,18,391,8,18,10,18,12,18,394,9,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,410,8,19,10,19,12,19,413,
		9,19,5,19,415,8,19,10,19,12,19,418,9,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,434,8,20,10,20,12,20,437,
		9,20,5,20,439,8,20,10,20,12,20,442,9,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,458,8,21,10,21,12,21,461,
		9,21,5,21,463,8,21,10,21,12,21,466,9,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,482,8,22,10,22,12,22,485,
		9,22,5,22,487,8,22,10,22,12,22,490,9,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,506,8,23,10,23,12,23,509,
		9,23,5,23,511,8,23,10,23,12,23,514,9,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,24,1,24,1,24,1,25,1,25,1,25,1,25,3,25,529,8,25,1,25,1,25,1,26,1,26,1,
		26,1,26,3,26,537,8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,
		1,29,1,29,1,29,1,29,3,29,553,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,0,
		2,12,16,31,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,0,10,1,0,48,52,1,0,48,53,2,0,3,7,53,53,3,0,
		48,48,51,51,53,53,1,0,40,42,1,0,38,39,2,0,26,27,30,33,1,0,34,35,2,0,49,
		49,53,53,1,0,52,53,616,0,65,1,0,0,0,2,88,1,0,0,0,4,91,1,0,0,0,6,105,1,
		0,0,0,8,173,1,0,0,0,10,176,1,0,0,0,12,188,1,0,0,0,14,211,1,0,0,0,16,224,
		1,0,0,0,18,237,1,0,0,0,20,264,1,0,0,0,22,274,1,0,0,0,24,283,1,0,0,0,26,
		285,1,0,0,0,28,314,1,0,0,0,30,316,1,0,0,0,32,332,1,0,0,0,34,353,1,0,0,
		0,36,377,1,0,0,0,38,401,1,0,0,0,40,425,1,0,0,0,42,449,1,0,0,0,44,473,1,
		0,0,0,46,497,1,0,0,0,48,521,1,0,0,0,50,524,1,0,0,0,52,532,1,0,0,0,54,540,
		1,0,0,0,56,544,1,0,0,0,58,548,1,0,0,0,60,556,1,0,0,0,62,64,3,30,15,0,63,
		62,1,0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,71,1,0,0,0,67,
		65,1,0,0,0,68,70,3,22,11,0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,
		72,1,0,0,0,72,74,1,0,0,0,73,71,1,0,0,0,74,75,5,1,0,0,75,76,5,18,0,0,76,
		77,3,2,1,0,77,78,3,28,14,0,78,79,5,19,0,0,79,1,1,0,0,0,80,87,3,8,4,0,81,
		87,3,18,9,0,82,87,3,20,10,0,83,87,3,4,2,0,84,87,3,32,16,0,85,87,3,14,7,
		0,86,80,1,0,0,0,86,81,1,0,0,0,86,82,1,0,0,0,86,83,1,0,0,0,86,84,1,0,0,
		0,86,85,1,0,0,0,87,90,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,3,1,0,0,0,
		90,88,1,0,0,0,91,92,5,2,0,0,92,93,5,16,0,0,93,94,3,6,3,0,94,95,5,17,0,
		0,95,96,5,22,0,0,96,5,1,0,0,0,97,106,5,49,0,0,98,106,5,53,0,0,99,106,5,
		52,0,0,100,106,5,48,0,0,101,106,5,51,0,0,102,106,5,50,0,0,103,106,3,12,
		6,0,104,106,3,16,8,0,105,97,1,0,0,0,105,98,1,0,0,0,105,99,1,0,0,0,105,
		100,1,0,0,0,105,101,1,0,0,0,105,102,1,0,0,0,105,103,1,0,0,0,105,104,1,
		0,0,0,106,7,1,0,0,0,107,108,5,53,0,0,108,109,5,25,0,0,109,110,3,12,6,0,
		110,111,5,22,0,0,111,174,1,0,0,0,112,113,5,3,0,0,113,116,5,53,0,0,114,
		115,5,25,0,0,115,117,3,16,8,0,116,114,1,0,0,0,116,117,1,0,0,0,117,118,
		1,0,0,0,118,174,5,22,0,0,119,120,5,4,0,0,120,123,5,53,0,0,121,122,5,25,
		0,0,122,124,5,49,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,125,1,0,0,0,125,
		174,5,22,0,0,126,127,5,5,0,0,127,130,5,53,0,0,128,129,5,25,0,0,129,131,
		5,52,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,132,1,0,0,0,132,174,5,22,
		0,0,133,134,5,6,0,0,134,137,5,53,0,0,135,136,5,25,0,0,136,138,3,12,6,0,
		137,135,1,0,0,0,137,138,1,0,0,0,138,139,1,0,0,0,139,174,5,22,0,0,140,141,
		5,53,0,0,141,142,5,25,0,0,142,143,7,0,0,0,143,174,5,22,0,0,144,145,5,7,
		0,0,145,148,5,53,0,0,146,147,5,25,0,0,147,149,3,12,6,0,148,146,1,0,0,0,
		148,149,1,0,0,0,149,150,1,0,0,0,150,174,5,22,0,0,151,152,5,53,0,0,152,
		171,5,53,0,0,153,154,5,25,0,0,154,155,5,8,0,0,155,156,5,53,0,0,156,167,
		5,16,0,0,157,162,7,1,0,0,158,159,5,23,0,0,159,161,7,1,0,0,160,158,1,0,
		0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,166,1,0,0,0,164,
		162,1,0,0,0,165,157,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,
		0,0,0,168,170,1,0,0,0,169,167,1,0,0,0,170,172,5,17,0,0,171,153,1,0,0,0,
		171,172,1,0,0,0,172,174,1,0,0,0,173,107,1,0,0,0,173,112,1,0,0,0,173,119,
		1,0,0,0,173,126,1,0,0,0,173,133,1,0,0,0,173,140,1,0,0,0,173,144,1,0,0,
		0,173,151,1,0,0,0,174,9,1,0,0,0,175,177,7,2,0,0,176,175,1,0,0,0,176,177,
		1,0,0,0,177,178,1,0,0,0,178,179,5,53,0,0,179,180,5,25,0,0,180,181,3,32,
		16,0,181,11,1,0,0,0,182,183,6,6,-1,0,183,184,5,16,0,0,184,185,3,12,6,0,
		185,186,5,17,0,0,186,189,1,0,0,0,187,189,7,3,0,0,188,182,1,0,0,0,188,187,
		1,0,0,0,189,198,1,0,0,0,190,191,10,4,0,0,191,192,7,4,0,0,192,197,3,12,
		6,5,193,194,10,3,0,0,194,195,7,5,0,0,195,197,3,12,6,4,196,190,1,0,0,0,
		196,193,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,13,
		1,0,0,0,200,198,1,0,0,0,201,202,5,53,0,0,202,204,5,36,0,0,203,205,5,22,
		0,0,204,203,1,0,0,0,204,205,1,0,0,0,205,212,1,0,0,0,206,207,5,53,0,0,207,
		209,5,37,0,0,208,210,5,22,0,0,209,208,1,0,0,0,209,210,1,0,0,0,210,212,
		1,0,0,0,211,201,1,0,0,0,211,206,1,0,0,0,212,15,1,0,0,0,213,214,6,8,-1,
		0,214,215,5,28,0,0,215,225,3,16,8,4,216,223,5,51,0,0,217,223,5,48,0,0,
		218,223,5,53,0,0,219,223,5,50,0,0,220,223,5,53,0,0,221,223,3,12,6,0,222,
		216,1,0,0,0,222,217,1,0,0,0,222,218,1,0,0,0,222,219,1,0,0,0,222,220,1,
		0,0,0,222,221,1,0,0,0,223,225,1,0,0,0,224,213,1,0,0,0,224,222,1,0,0,0,
		225,234,1,0,0,0,226,227,10,3,0,0,227,228,7,6,0,0,228,233,3,16,8,4,229,
		230,10,2,0,0,230,231,7,7,0,0,231,233,3,16,8,3,232,226,1,0,0,0,232,229,
		1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,17,1,0,0,0,
		236,234,1,0,0,0,237,238,5,9,0,0,238,239,5,16,0,0,239,240,3,16,8,0,240,
		241,5,17,0,0,241,242,5,18,0,0,242,243,3,2,1,0,243,254,5,19,0,0,244,245,
		5,10,0,0,245,246,5,16,0,0,246,247,3,16,8,0,247,248,5,17,0,0,248,249,5,
		18,0,0,249,250,3,2,1,0,250,251,5,19,0,0,251,253,1,0,0,0,252,244,1,0,0,
		0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,262,1,0,0,0,256,
		254,1,0,0,0,257,258,5,11,0,0,258,259,5,18,0,0,259,260,3,2,1,0,260,261,
		5,19,0,0,261,263,1,0,0,0,262,257,1,0,0,0,262,263,1,0,0,0,263,19,1,0,0,
		0,264,265,5,12,0,0,265,266,5,16,0,0,266,267,3,16,8,0,267,268,5,17,0,0,
		268,269,5,18,0,0,269,270,3,2,1,0,270,271,5,19,0,0,271,21,1,0,0,0,272,275,
		3,24,12,0,273,275,3,26,13,0,274,272,1,0,0,0,274,273,1,0,0,0,275,23,1,0,
		0,0,276,284,3,34,17,0,277,284,3,36,18,0,278,284,3,38,19,0,279,284,3,40,
		20,0,280,284,3,42,21,0,281,284,3,44,22,0,282,284,3,46,23,0,283,276,1,0,
		0,0,283,277,1,0,0,0,283,278,1,0,0,0,283,279,1,0,0,0,283,280,1,0,0,0,283,
		281,1,0,0,0,283,282,1,0,0,0,284,25,1,0,0,0,285,286,5,53,0,0,286,299,5,
		16,0,0,287,288,7,2,0,0,288,294,5,53,0,0,289,290,5,23,0,0,290,291,7,2,0,
		0,291,293,5,53,0,0,292,289,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,
		295,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,297,287,1,0,0,0,298,301,1,
		0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,299,1,0,0,0,
		302,303,5,17,0,0,303,304,5,18,0,0,304,305,3,2,1,0,305,306,5,19,0,0,306,
		27,1,0,0,0,307,315,3,48,24,0,308,315,3,50,25,0,309,315,3,52,26,0,310,315,
		3,54,27,0,311,315,3,56,28,0,312,315,3,58,29,0,313,315,3,60,30,0,314,307,
		1,0,0,0,314,308,1,0,0,0,314,309,1,0,0,0,314,310,1,0,0,0,314,311,1,0,0,
		0,314,312,1,0,0,0,314,313,1,0,0,0,315,29,1,0,0,0,316,317,5,13,0,0,317,
		318,5,53,0,0,318,323,5,18,0,0,319,322,3,8,4,0,320,322,3,22,11,0,321,319,
		1,0,0,0,321,320,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,
		0,324,326,1,0,0,0,325,323,1,0,0,0,326,327,5,19,0,0,327,31,1,0,0,0,328,
		329,5,53,0,0,329,331,5,24,0,0,330,328,1,0,0,0,331,334,1,0,0,0,332,330,
		1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,332,1,0,0,0,335,336,5,53,0,
		0,336,347,5,16,0,0,337,342,7,1,0,0,338,339,5,23,0,0,339,341,7,1,0,0,340,
		338,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,346,1,
		0,0,0,344,342,1,0,0,0,345,337,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,
		347,348,1,0,0,0,348,350,1,0,0,0,349,347,1,0,0,0,350,351,5,17,0,0,351,352,
		5,22,0,0,352,33,1,0,0,0,353,354,5,14,0,0,354,355,5,53,0,0,355,368,5,16,
		0,0,356,357,7,2,0,0,357,363,5,53,0,0,358,359,5,23,0,0,359,360,7,2,0,0,
		360,362,5,53,0,0,361,358,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,
		1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,366,356,1,0,0,0,367,370,1,0,0,
		0,368,366,1,0,0,0,368,369,1,0,0,0,369,371,1,0,0,0,370,368,1,0,0,0,371,
		372,5,17,0,0,372,373,5,18,0,0,373,374,3,2,1,0,374,375,3,48,24,0,375,376,
		5,19,0,0,376,35,1,0,0,0,377,378,5,6,0,0,378,379,5,53,0,0,379,392,5,16,
		0,0,380,381,7,2,0,0,381,387,5,53,0,0,382,383,5,23,0,0,383,384,7,2,0,0,
		384,386,5,53,0,0,385,382,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,388,
		1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,390,380,1,0,0,0,391,394,1,0,0,
		0,392,390,1,0,0,0,392,393,1,0,0,0,393,395,1,0,0,0,394,392,1,0,0,0,395,
		396,5,17,0,0,396,397,5,18,0,0,397,398,3,2,1,0,398,399,3,50,25,0,399,400,
		5,19,0,0,400,37,1,0,0,0,401,402,5,7,0,0,402,403,5,53,0,0,403,416,5,16,
		0,0,404,405,7,2,0,0,405,411,5,53,0,0,406,407,5,23,0,0,407,408,7,2,0,0,
		408,410,5,53,0,0,409,406,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,
		1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,414,404,1,0,0,0,415,418,1,0,0,
		0,416,414,1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,0,418,416,1,0,0,0,419,
		420,5,17,0,0,420,421,5,18,0,0,421,422,3,2,1,0,422,423,3,52,26,0,423,424,
		5,19,0,0,424,39,1,0,0,0,425,426,5,4,0,0,426,427,5,53,0,0,427,440,5,16,
		0,0,428,429,7,2,0,0,429,435,5,53,0,0,430,431,5,23,0,0,431,432,7,2,0,0,
		432,434,5,53,0,0,433,430,1,0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,435,436,
		1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,438,428,1,0,0,0,439,442,1,0,0,
		0,440,438,1,0,0,0,440,441,1,0,0,0,441,443,1,0,0,0,442,440,1,0,0,0,443,
		444,5,17,0,0,444,445,5,18,0,0,445,446,3,2,1,0,446,447,3,54,27,0,447,448,
		5,19,0,0,448,41,1,0,0,0,449,450,5,5,0,0,450,451,5,53,0,0,451,464,5,16,
		0,0,452,453,7,2,0,0,453,459,5,53,0,0,454,455,5,23,0,0,455,456,7,2,0,0,
		456,458,5,53,0,0,457,454,1,0,0,0,458,461,1,0,0,0,459,457,1,0,0,0,459,460,
		1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,462,452,1,0,0,0,463,466,1,0,0,
		0,464,462,1,0,0,0,464,465,1,0,0,0,465,467,1,0,0,0,466,464,1,0,0,0,467,
		468,5,17,0,0,468,469,5,18,0,0,469,470,3,2,1,0,470,471,3,56,28,0,471,472,
		5,19,0,0,472,43,1,0,0,0,473,474,5,3,0,0,474,475,5,53,0,0,475,488,5,16,
		0,0,476,477,7,2,0,0,477,483,5,53,0,0,478,479,5,23,0,0,479,480,7,2,0,0,
		480,482,5,53,0,0,481,478,1,0,0,0,482,485,1,0,0,0,483,481,1,0,0,0,483,484,
		1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,486,476,1,0,0,0,487,490,1,0,0,
		0,488,486,1,0,0,0,488,489,1,0,0,0,489,491,1,0,0,0,490,488,1,0,0,0,491,
		492,5,17,0,0,492,493,5,18,0,0,493,494,3,2,1,0,494,495,3,58,29,0,495,496,
		5,19,0,0,496,45,1,0,0,0,497,498,5,53,0,0,498,499,5,53,0,0,499,512,5,16,
		0,0,500,501,7,2,0,0,501,507,5,53,0,0,502,503,5,23,0,0,503,504,7,2,0,0,
		504,506,5,53,0,0,505,502,1,0,0,0,506,509,1,0,0,0,507,505,1,0,0,0,507,508,
		1,0,0,0,508,511,1,0,0,0,509,507,1,0,0,0,510,500,1,0,0,0,511,514,1,0,0,
		0,512,510,1,0,0,0,512,513,1,0,0,0,513,515,1,0,0,0,514,512,1,0,0,0,515,
		516,5,17,0,0,516,517,5,18,0,0,517,518,3,2,1,0,518,519,3,60,30,0,519,520,
		5,19,0,0,520,47,1,0,0,0,521,522,5,15,0,0,522,523,5,22,0,0,523,49,1,0,0,
		0,524,528,5,15,0,0,525,529,5,48,0,0,526,529,5,53,0,0,527,529,3,12,6,0,
		528,525,1,0,0,0,528,526,1,0,0,0,528,527,1,0,0,0,529,530,1,0,0,0,530,531,
		5,22,0,0,531,51,1,0,0,0,532,536,5,15,0,0,533,537,5,51,0,0,534,537,5,53,
		0,0,535,537,3,12,6,0,536,533,1,0,0,0,536,534,1,0,0,0,536,535,1,0,0,0,537,
		538,1,0,0,0,538,539,5,22,0,0,539,53,1,0,0,0,540,541,5,15,0,0,541,542,7,
		8,0,0,542,543,5,22,0,0,543,55,1,0,0,0,544,545,5,15,0,0,545,546,7,9,0,0,
		546,547,5,22,0,0,547,57,1,0,0,0,548,552,5,15,0,0,549,553,5,50,0,0,550,
		553,5,53,0,0,551,553,3,16,8,0,552,549,1,0,0,0,552,550,1,0,0,0,552,551,
		1,0,0,0,553,554,1,0,0,0,554,555,5,22,0,0,555,59,1,0,0,0,556,557,5,15,0,
		0,557,558,5,53,0,0,558,559,5,22,0,0,559,61,1,0,0,0,54,65,71,86,88,105,
		116,123,130,137,148,162,167,171,173,176,188,196,198,204,209,211,222,224,
		232,234,254,262,274,283,294,299,314,321,323,332,342,347,363,368,387,392,
		411,416,435,440,459,464,483,488,507,512,528,536,552
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
